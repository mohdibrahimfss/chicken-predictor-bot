import os
import logging
import json
from datetime import datetime
import random

# External Libraries
# Need to install: pip install python-telegram-bot flask requests python-dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from flask import Flask, request, jsonify

# --- Configuration and Storage ---

# Environment variables
# NOTE: Replace with your actual environment variable names if different
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
VERCEL_URL = os.environ.get("VERCEL_URL")
AFFILIATE_LINK = os.environ.get("AFFILIATE_LINK", "https://mostbet-king.com/5rTs")

# Logging setup
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# In-memory Storage (like in index.js)
users = {}
stats = {"total": 0, "registered": 0, "deposited": 0}
postback_data = {"registrations": {}, "deposits": {}, "approvedDeposits": {}}

# ALL 5 LANGUAGES - EXACT TEXT
languages = {
    # ... (Keep the exact language data block from your index.js here, converted to a Python dictionary) ...
    # Due to space, inserting the full languages dictionary as a placeholder.
    "en": {
        "name": "English", "flag": "ЁЯЗ║ЁЯЗ╕",
        "welcome": "тЬЕ You selected English!",
        "selectLanguage": "Select your preferred Languages",
        "step1": "ЁЯМР Step 1 - Register",
        "mustNew": "тА╝я╕П THE ACCOUNT MUST BE NEW",
        "instructions": "1я╕ПтГг If after clicking the \"REGISTER\" button you get to the old account, you need to log out of it and click the button again.\n\n2я╕ПтГг Specify a promocode during registration: CLAIM\n\n3я╕ПтГг Make a Minimum deposit atleast 600тВ╣ or 6$ in any currency",
        "enterPlayerId": "Please enter your Mostbet Player ID to verify:",
        "howToFind": "ЁЯУЭ How to find Player ID:\n1. Login to Mostbet account\n2. Go to Profile Settings\n3. Copy Player ID number\n4. Paste it here",
        "enterPlayerIdNow": "ЁЯФв Enter your Player ID now:",
        "congratulations": "Congratulations, Please Select Your Game Mode For Play:",
        "notRegistered": "тЭМ Sorry, You're Not Registered!\n\nPlease click the REGISTER button first and complete your registration using our affiliate link.\n\nAfter successful registration, come back and enter your Player ID.",
        "registeredNoDeposit": "ЁЯОЙ Great, you have successfully completed registration!\n\nтЬЕ Your account is synchronized with the bot\n\nЁЯТ┤ To gain access to signals, deposit your account (make a deposit) with at least 600тВ╣ or $6 in any currency\n\nЁЯХ╣я╕П After successfully replenishing your account, click on the CHECK DEPOSIT button and gain access",
        "limitReached": "You're Reached Your Limited, please try again tommarow for continue prediction or if you want to continue to deposit again atleast 400тВ╣ or 4$ in any currency",
        "checking": "ЁЯФН Checking your registration...",
        "verified": "тЬЕ Verification Successful!",
        "welcomeBack": "ЁЯСЛ Welcome back!"
    },
    "hi": {
        "name": "рд╣рд┐рдВрджреА", "flag": "ЁЯЗоЁЯЗ│",
        "welcome": "тЬЕ рдЖрдкрдиреЗ рд╣рд┐рдВрджреА рдЪреБрдиреА!",
        "selectLanguage": "рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "step1": "ЁЯМР рд╕реНрдЯреЗрдк 1 - рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ",
        "mustNew": "тА╝я╕П рдЕрдХрд╛рдЙрдВрдЯ рдирдпрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП",
        "instructions": "1я╕ПтГг рдЕрдЧрд░ \"REGISTER\" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЖрдк рдкреБрд░рд╛рдиреЗ рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рдЖрддреЗ рд╣реИрдВ, рддреЛ рд▓реЙрдЧ рдЖрдЙрдЯ рдХрд░рдХреЗ рдлрд┐рд░ рд╕реЗ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ\n\n2я╕ПтГг рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреЗ рджреМрд░рд╛рди рдкреНрд░реЛрдореЛрдХреЛрдб рджрд░реНрдЬ рдХрд░реЗрдВ: CLAIM\n\n3я╕ПтГг рдиреНрдпреВрдирддрдо 600тВ╣ рдпрд╛ 6$ рдЬрдорд╛ рдХрд░реЗрдВ",
        "enterPlayerId": "рдХреГрдкрдпрд╛ рд╕рддреНрдпрд╛рдкрди рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ Mostbet Player ID рджрд░реНрдЬ рдХрд░реЗрдВ:",
        "howToFind": "ЁЯУЭ Player ID рдХреИрд╕реЗ рдвреВрдВрдвреЗрдВ:\n1. Mostbet рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ\n2. рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдкрд░ рдЬрд╛рдПрдВ\n3. Player ID рдирдВрдмрд░ рдХреЙрдкреА рдХрд░реЗрдВ\n4. рдпрд╣рд╛рдВ рдкреЗрд╕реНрдЯ рдХрд░реЗрдВ",
        "enterPlayerIdNow": "ЁЯФв рдЕрдкрдирд╛ Player ID рдЕрдм рджрд░реНрдЬ рдХрд░реЗрдВ:",
        "congratulations": "рдмрдзрд╛рдИ рд╣реЛ, рдХреГрдкрдпрд╛ рдЦреЗрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ рдЧреЗрдо рдореЛрдб рдЪреБрдиреЗрдВ:",
        "notRegistered": "тЭМ рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдЖрдк рд░рдЬрд┐рд╕реНрдЯрд░реНрдб рдирд╣реАрдВ рд╣реИрдВ!\n\nрдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ REGISTER рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рд╣рдорд╛рд░реЗ рдПрдлрд┐рд▓рд┐рдПрдЯ рд▓рд┐рдВрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдкреВрд░рд╛ рдХрд░реЗрдВ\n\nрд╕рдлрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреЗ рдмрд╛рдж рд╡рд╛рдкрд╕ рдЖрдПрдВ рдФрд░ рдЕрдкрдирд╛ Player ID рджрд░реНрдЬ рдХрд░реЗрдВ",
        "registeredNoDeposit": "ЁЯОЙ рдмрдврд╝рд┐рдпрд╛, рдЖрдкрдиреЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдкреВрд░рд╛ рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ!\n\nтЬЕ рдЖрдкрдХрд╛ рдЕрдХрд╛рдЙрдВрдЯ рдмреЙрдЯ рдХреЗ рд╕рд╛рде рд╕рд┐рдВрдХ рд╣реЛ рдЧрдпрд╛ рд╣реИ\n\nЁЯТ┤ рд╕рд┐рдЧреНрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреЗ рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рдХрдо рд╕реЗ рдХрдо 600тВ╣ рдпрд╛ $6 рдЬрдорд╛ рдХрд░реЗрдВ\n\nЁЯХ╣я╕П рдЕрдкрдирд╛ рдЕрдХрд╛рдЙрдВрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░рд┐рдЪрд╛рд░реНрдЬ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж, CHECK DEPOSIT рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рдПрдХреНрд╕реЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "limitReached": "рдЖрдк рдЕрдкрдиреА рд╕реАрдорд╛ рддрдХ рдкрд╣реБрдБрдЪ рдЧрдП рд╣реИрдВ, рдХреГрдкрдпрд╛ рдХрд▓ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдпрд╛ рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдлрд┐рд░ рд╕реЗ рдХрдо рд╕реЗ рдХрдо 400тВ╣ рдпрд╛ 4$ рдЬрдорд╛ рдХрд░реЗрдВ",
        "checking": "ЁЯФН рдЖрдкрдХреА рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдЬрд╛рдВрдЪреА рдЬрд╛ рд░рд╣реА рд╣реИ...",
        "verified": "тЬЕ рд╕рддреНрдпрд╛рдкрди рд╕рдлрд▓!",
        "welcomeBack": "ЁЯСЛ рд╡рд╛рдкрд╕реА рдкрд░ рд╕реНрд╡рд╛рдЧрдд!"
    },
    # ... (bn, ur, ne follow the exact structure) ...
    "bn": {
        "name": "ржмрж╛ржВрж▓рж╛", "flag": "ЁЯЗзЁЯЗй",
        "welcome": "тЬЕ ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржи!",
        "selectLanguage": "ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "step1": "ЁЯМР ржзрж╛ржк 1 - ржирж┐ржмржирзНржзржи ржХрж░рзБржи",
        "mustNew": "тА╝я╕П ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржирждрзБржи рж╣рждрзЗ рж╣ржмрзЗ",
        "instructions": "1я╕ПтГг \"REGISTER\" ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж╛рж░ ржкрж░рзЗ ржпржжрж┐ ржЖржкржирж┐ ржкрзБрж░рж╛ржирзЛ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржкрзНрж░ржмрзЗрж╢ ржХрж░рзЗржи, рждрж╛рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ рж▓ржЧржЖржЙржЯ ржХрж░рзЗ ржЖржмрж╛рж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рждрзЗ рж╣ржмрзЗ\n\n2я╕ПтГг ржирж┐ржмржирзНржзржирзЗрж░ рж╕ржоржпрж╝ ржкрзНрж░ржорзЛржХрзЛржб ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзБржи: CLAIM\n\n3я╕ПтГг ржирзНржпрзВржирждржо 600тВ╣ ржмрж╛ 6$ ржЬржорж╛ ржХрж░рзБржи",
        "enterPlayerId": "ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ Mostbet Player ID рж▓рж┐ржЦрзБржи:",
        "howToFind": "ЁЯУЭ Player ID ржХрж┐ржнрж╛ржмрзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржмрзЗржи:\n1. Mostbet ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ рж▓ржЧржЗржи ржХрж░рзБржи\n2. ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯрж┐ржВрж╕рзЗ ржпрж╛ржи\n3. Player ID ржиржорзНржмрж░ ржХржкрж┐ ржХрж░рзБржи\n4. ржПржЦрж╛ржирзЗ ржкрзЗрж╕рзНржЯ ржХрж░рзБржи",
        "enterPlayerIdNow": "ЁЯФв ржПржЦржи ржЖржкржирж╛рж░ Player ID рж▓рж┐ржЦрзБржи:",
        "congratulations": "ржЕржнрж┐ржиржирзНржжржи, ржЦрзЗрж▓рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЧрзЗржо ржорзЛржб ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        "notRegistered": "тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж┐ ржирж┐ржмржирзНржзрж┐ржд ржиржи!\n\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ REGISTER ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи ржПржмржВ ржЖржорж╛ржжрзЗрж░ ржЕрзНржпрж╛ржлрж┐рж▓рж┐ржпрж╝рзЗржЯ рж▓рж┐ржЩрзНржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржирж┐ржмржирзНржзржи рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзБржи\n\nрж╕ржлрж▓ ржирж┐ржмржирзНржзржирзЗрж░ ржкрж░рзЗ ржлрж┐рж░рзЗ ржЖрж╕рзБржи ржПржмржВ ржЖржкржирж╛рж░ Player ID рж▓рж┐ржЦрзБржи",
        "registeredNoDeposit": "ЁЯОЙ ржжрзБрж░рзНржжрж╛ржирзНржд, ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржирж┐ржмржирзНржзржи рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзЗржЫрзЗржи!\n\nтЬЕ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржмржЯрзЗрж░ рж╕рж╛ржерзЗ рж╕рж┐ржЩрзНржХ рж╣ржпрж╝рзЗржЫрзЗ\n\nЁЯТ┤ рж╕рж┐ржЧржирзНржпрж╛рж▓ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрзЗрждрзЗ, ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржХржоржкржХрзНрж╖рзЗ 600тВ╣ ржмрж╛ $6 ржЬржорж╛ ржХрж░рзБржи\n\nЁЯХ╣я╕П ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐ржЪрж╛рж░рзНржЬ ржХрж░рж╛рж░ ржкрж░рзЗ, CHECK DEPOSIT ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи ржПржмржВ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрж╛ржи",
        "limitReached": "ржЖржкржирж┐ ржЖржкржирж╛рж░ рж╕рзАржорж╛ржпрж╝ ржкрзМржБржЫрзЗржЫрзЗржи, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржЧрж╛ржорзАржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрзЗрждрзЗ ржЖржмрж╛рж░ ржХржоржкржХрзНрж╖рзЗ 400тВ╣ ржмрж╛ 4$ ржЬржорж╛ ржХрж░рзБржи",
        "checking": "ЁЯФН ржЖржкржирж╛рж░ ржирж┐ржмржирзНржзржи ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
        "verified": "тЬЕ ржпрж╛ржЪрж╛ржЗржХрж░ржг рж╕ржлрж▓!",
        "welcomeBack": "ЁЯСЛ ржлрж┐рж░рзЗ ржЖрж╕рж╛рж░ рж╕рзНржмрж╛ржЧрждржо!"
    },
    "ur": {
        "name": "╪з╪▒╪п┘И", "flag": "ЁЯЗ╡ЁЯЗ░",
        "welcome": "тЬЕ ╪в┘╛ ┘Ж█Т ╪з╪▒╪п┘И ┘Е┘Ж╪к╪о╪и ┌й█М!",
        "selectLanguage": "╪з┘╛┘Ж█М ┘╛╪│┘Ж╪п█М╪п█Б ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "step1": "ЁЯМР ┘Е╪▒╪н┘Д█Б 1 - ╪▒╪м╪│┘╣╪▒ ┌й╪▒█М┌║",
        "mustNew": "тА╝я╕П ╪з┌й╪з╪д┘Ж┘╣ ┘Ж█М╪з █Б┘И┘Ж╪з ┌Ж╪з█Б█М█Т",
        "instructions": "1я╕ПтГг ╪з┌п╪▒ \"REGISTER\" ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒┘Ж█Т ┌й█Т ╪и╪╣╪п ╪в┘╛ ┘╛╪▒╪з┘Ж█Т ╪з┌й╪з╪д┘Ж┘╣ ┘Е█М┌║ ╪в╪к█Т █Б█М┌║╪М ╪к┘И ╪в┘╛ ┌й┘И ┘Д╪з┌п ╪в╪д┘╣ █Б┘И ┌й╪▒ ╪п┘И╪и╪з╪▒█Б ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒┘Ж╪з █Б┘И┌п╪з\n\n2я╕ПтГг ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┌й█Т ╪п┘И╪▒╪з┘Ж ┘╛╪▒┘И┘Е┘И┌й┘И┌ИцМЗхоЪ ┌й╪▒█М┌║: CLAIM\n\n3я╕ПтГг ┌й┘Е ╪з╪▓ ┌й┘Е 600тВ╣ █М╪з 6$ ╪м┘Е╪╣ ┌й╪▒█М┌║",
        "enterPlayerId": "╪и╪▒╪з█Б ┌й╪▒┘Е ╪к╪╡╪п█М┘В ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж╪з Mostbet Player ID ╪п╪▒╪м ┌й╪▒█М┌║:",
        "howToFind": "ЁЯУЭ Player ID ┌й█М╪│█Т ┌И┌╛┘И┘Ж┌И█М┌║:\n1. Mostbet ╪з┌й╪з╪д┘Ж┘╣ ┘Е█М┌║ ┘Д╪з┌п ╪з┘Ж ┌й╪▒█М┌║\n2. ┘╛╪▒┘И┘Б╪з╪ж┘Д ╪│█М┘╣┘Ж┌п╪▓ ┘╛╪▒ ╪м╪з╪ж█М┌║\n3. Player ID ┘Ж┘Е╪и╪▒ ┌й╪з┘╛█М ┌й╪▒█М┌║\n4. █М█Б╪з┌║ ┘╛█М╪│┘╣ ┌й╪▒█М┌║",
        "enterPlayerIdNow": "ЁЯФв ╪з╪и ╪з┘╛┘Ж╪з Player ID ╪п╪▒╪м ┌й╪▒█М┌║:",
        "congratulations": "┘Е╪и╪з╪▒┌й █Б┘И╪М ╪и╪▒╪з█Б ┌й╪▒┘Е ┌й┌╛█М┘Д┘Ж█Т ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж╪з ┌п█М┘Е ┘Е┘И┌И ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║:",
        "notRegistered": "тЭМ ┘Е╪╣╪░╪▒╪к╪М ╪в┘╛ ╪▒╪м╪│┘╣╪▒┌И ┘Ж█Б█М┌║ █Б█М┌║!\n\n╪и╪▒╪з█Б ┌й╪▒┘Е ┘╛█Б┘Д█Т REGISTER ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒█М┌║ ╪з┘И╪▒ █Б┘Е╪з╪▒█Т affiliate link ┌й╪з ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒╪к█Т █Б┘И╪ж█Т ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┘Е┌й┘Е┘Д ┌й╪▒█М┌║\n\n┌й╪з┘Е█М╪з╪и ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┌й█Т ╪и╪╣╪п ┘И╪з┘╛╪│ ╪в╪ж█М┌║ ╪з┘И╪▒ ╪з┘╛┘Ж╪з Player ID ╪п╪▒╪м ┌й╪▒█М┌║",
        "registeredNoDeposit": "ЁЯОЙ ╪и█Б╪к ╪з┌Ж┌╛╪з╪М ╪в┘╛ ┘Ж█Т ┌й╪з┘Е█М╪з╪и█М ┌й█Т ╪│╪з╪к┌╛ ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┘Е┌й┘Е┘Д ┌й╪▒ ┘Д█М █Б█Т!\n\nтЬЕ ╪в┘╛ ┌й╪з ╪з┌й╪з╪д┘Ж┘╣ ╪и┘И┘╣ ┌й█Т ╪│╪з╪к┌╛ sync █Б┘И ┌п█М╪з █Б█Т\n\nЁЯТ┤ ╪│┌п┘Ж┘Д╪▓ ╪к┌й ╪▒╪│╪з╪ж█М ╪н╪з╪╡┘Д ┌й╪▒┘Ж█Т ┌й█Т ┘Д█М█Т╪М ╪з┘╛┘Ж█Т ╪з┌й╪з╪д┘Ж┘╣ ┘Е█М┌║ ┌й┘Е ╪з╪▓ ┌й┘Е 600тВ╣ █М╪з $6 ╪м┘Е╪╣ ┌й╪▒█М┌║\n\nЁЯХ╣я╕П ╪з┘╛┘Ж█Т ╪з┌й╪з╪д┘Ж┘╣ ┌й┘И ┌й╪з┘Е█М╪з╪и█М ╪│█Т ╪▒█М ┌Ж╪з╪▒╪м ┌й╪▒┘Ж█Т ┌й█Т ╪и╪╣╪п╪М CHECK DEPOSIT ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒█М┌║ ╪з┘И╪▒ ╪▒╪│╪з╪ж█М ╪н╪з╪╡┘Д ┌й╪▒█М┌║",
        "limitReached": "╪в┘╛ ╪з┘╛┘Ж█М ╪н╪п ╪к┌й ┘╛█Б┘Ж┌Ж ┌п╪ж█Т █Б█М┌║╪М ╪и╪▒╪з█Б ┌й╪▒┘Е ┌й┘Д ╪п┘И╪и╪з╪▒█Б ┌й┘И╪┤╪┤ ┌й╪▒█М┌║ █М╪з ╪м╪з╪▒█М ╪▒┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т ╪п┘И╪и╪з╪▒█Б ┌й┘Е ╪з╪▓ ┌й┘Е 400тВ╣ █М╪з 4$ ╪м┘Е╪╣ ┌й╪▒█М┌║",
        "checking": "ЁЯФН ╪в┘╛ ┌й█М ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┌Ж█М┌й ┌й█М ╪м╪з ╪▒█Б█М █Б█Т...",
        "verified": "тЬЕ ╪к╪╡╪п█М┘В ┌й╪з┘Е█М╪з╪и!",
        "welcomeBack": "ЁЯСЛ ┘И╪з┘╛╪│█М ┘╛╪▒ ╪о┘И╪┤ ╪в┘Е╪п█М╪п!"
    },
    "ne": {
        "name": "рдиреЗрдкрд╛рд▓реА", "flag": "ЁЯЗ│ЁЯЗ╡",
        "welcome": "тЬЕ рддрдкрд╛рдИрдВрд▓реЗ рдиреЗрдкрд╛рд▓реА рдЪрдпрди рдЧрд░реНрдиреБрднрдпреЛ!",
        "selectLanguage": "рдЖрдлреНрдиреЛ рдордирдкрд░реНрдиреЗ рднрд╛рд╖рд╛ рдЪрдпрди рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "step1": "ЁЯМР рдЪрд░рдг 1 - рджрд░реНрддрд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "mustNew": "тА╝я╕П рдЦрд╛рддрд╛ рдирдпрд╛рдБ рд╣реБрдиреБрдкрд░реНрдЫ",
        "instructions": "1я╕ПтГг рдпрджрд┐ \"REGISTER\" рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реЗрдкрдЫрд┐ рддрдкрд╛рдИрдВ рдкреБрд░рд╛рдиреЛ рдЦрд╛рддрд╛рдорд╛ рдкреБрдЧреНрдиреБрд╣реБрдиреНрдЫ рднрдиреЗ, рддрдкрд╛рдИрдВрд▓реЗ рд▓рдЧрдЖрдЙрдЯ рдЧрд░реЗрд░ рдлреЗрд░рд┐ рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрдкрд░реНрдЫ\n\n2я╕ПтГг рджрд░реНрддрд╛ рд╕рдордпрдорд╛ рдкреНрд░реЛрдореЛрдХреЛрдб рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН: CLAIM\n\n3я╕ПтГг рдХрдореНрддрд┐рдорд╛ 600тВ╣ рд╡рд╛ 6$ рдЬрдореНрдорд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "enterPlayerId": "рдХреГрдкрдпрд╛ рд╕рддреНрдпрд╛рдкрди рдЧрд░реНрди рдЖрдлреНрдиреЛ Mostbet Player ID рдкреНрд░рд╡рд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН:",
        "howToFind": "ЁЯУЭ Player ID рдХрд╕рд░реА рдЦреЛрдЬреНрдиреЗ:\n1. Mostbet рдЦрд╛рддрд╛рдорд╛ рд▓рдЧрдЗрди рдЧрд░реНрдиреБрд╣реЛрд╕реН\n2. рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрдЯрд┐рдЩрд╣рд░реВрдорд╛ рдЬрд╛рдиреБрд╣реЛрд╕реН\n3. Player ID рдирдореНрдмрд░ рдХрдкреА рдЧрд░реНрдиреБрд╣реЛрд╕реН\n4. рдпрд╣рд╛рдБ рдкреЗрд╕реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "enterPlayerIdNow": "ЁЯФв рдЕрдм рдЖрдлреНрдиреЛ Player ID рдкреНрд░рд╡рд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН:",
        "congratulations": "рдмрдзрд╛рдИ рдЫ, рдХреГрдкрдпрд╛ рдЦреЗрд▓реНрдирдХреЛ рд▓рд╛рдЧрд┐ рдЖрдлреНрдиреЛ рдЦреЗрд▓ рдореЛрдб рдЪрдпрди рдЧрд░реНрдиреБрд╣реЛрд╕реН:",
        "notRegistered": "тЭМ рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд╕реН, рддрдкрд╛рдИрдВ рджрд░реНрддрд╛ рдЧрд░рд┐рдПрдХреЛ рдЫреИрди!\n\nрдХреГрдкрдпрд╛ рдкрд╣рд┐рд▓реЗ REGISTER рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реН рд░ рд╣рд╛рдореНрд░реЛ рдПрдлрд┐рд▓рд┐рдПрдЯ рд▓рд┐рдЩреНрдХ рдкреНрд░рдпреЛрдЧ рдЧрд░реЗрд░ рджрд░реНрддрд╛ рдкреВрд░рд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН\n\nрд╕рдлрд▓ рджрд░реНрддрд╛ рдкрдЫрд┐ рдлрд░реНрдХрдиреБрд╣реЛрд╕реН рд░ рдЖрдлреНрдиреЛ Player ID рдкреНрд░рд╡рд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "registeredNoDeposit": "ЁЯОЙ рд░рд╛рдореНрд░реЛ, рддрдкрд╛рдИрдВрд▓реЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рджрд░реНрддрд╛ рдкреВрд░рд╛ рдЧрд░реНрдиреБрднрдпреЛ!\n\nтЬЕ рддрдкрд╛рдИрдВрдХреЛ рдЦрд╛рддрд╛ рдмреЛрдЯрд╕рдБрдЧ рд╕рд┐рдЩреНрдХ рднрдПрдХреЛ рдЫ\n\nЁЯТ┤ рд╕рд┐рдЧреНрдирд▓рд╣рд░реВ рдкрд╣реБрдБрдЪ рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрди, рдЖрдлреНрдиреЛ рдЦрд╛рддрд╛рдорд╛ рдХрдореНрддрд┐рдорд╛ 600тВ╣ рд╡рд╛ $6 рдЬрдореНрдорд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН\n\nЁЯХ╣я╕П рдЖрдлреНрдиреЛ рдЦрд╛рддрд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░рд┐рдЪрд╛рд░реНрдЬ рдЧрд░реЗрдкрдЫрд┐, CHECK DEPOSIT рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реН рд░ рдкрд╣реБрдБрдЪ рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "limitReached": "рддрдкрд╛рдИрдВ рдЖрдлреНрдиреЛ рд╕реАрдорд╛рдорд╛ рдкреБрдЧреНрдиреБрднрдпреЛ, рдХреГрдкрдпрд╛ рднреЛрд▓реА рдлреЗрд░рд┐ рдкреНрд░рдпрд╛рд╕ рдЧрд░реНрдиреБрд╣реЛрд╕реН рд╡рд╛ рдЬрд╛рд░реА рд░рд╛рдЦреНрдирдХрд╛ рд▓рд╛рдЧрд┐ рдлреЗрд░рд┐ рдХрдореНрддрд┐рдорд╛ 400тВ╣ рд╡рд╛ 4$ рдЬрдореНрдорд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "checking": "ЁЯФН рддрдкрд╛рдИрдВрдХреЛ рджрд░реНрддрд╛ рдЬрд╛рдБрдЪ рдЧрд░рд┐рджреИрдЫ...",
        "verified": "тЬЕ рд╕рддреНрдпрд╛рдкрди рд╕рдлрд▓!",
        "welcomeBack": "ЁЯСЛ рдлрд░реНрдХрд┐рдиреБрднрдПрдХреЛрдорд╛ рд╕реНрд╡рд╛рдЧрдд!"
    }
}


# ALL PREDICTION IMAGES - EXACT LINKS
prediction_images = {
    # ... (Keep the exact prediction_images data block from your index.js here, converted to a Python dictionary) ...
    # Due to space, inserting the full prediction_images dictionary as a placeholder.
    "easy": [
        {"url": "https://i.postimg.cc/dQS5pr0N/IMG-20251020-095836-056.jpg", "accuracy": "85%"},
        {"url": "https://i.postimg.cc/P5BxR3GJ/IMG-20251020-095841-479.jpg", "accuracy": "95%"},
        {"url": "https://i.postimg.cc/QdWN1QBr/IMG-20251020-095848-018.jpg", "accuracy": "78%"},
        {"url": "https://i.postimg.cc/gjJmJ89H/IMG-20251020-095902-112.jpg", "accuracy": "85%"},
        {"url": "https://i.postimg.cc/QMJ3J0hQ/IMG-20251020-095906-484.jpg", "accuracy": "70%"},
        {"url": "https://i.postimg.cc/654xm9BR/IMG-20251020-095911-311.jpg", "accuracy": "80%"},
        {"url": "https://i.postimg.cc/NMCZdnVX/IMG-20251020-095916-536.jpg", "accuracy": "82%"},
        {"url": "https://i.postimg.cc/8k3qWqLk/IMG-20251020-095921-307.jpg", "accuracy": "88%"},
        {"url": "https://i.postimg.cc/pdqSd72R/IMG-20251020-095926-491.jpg", "accuracy": "75%"},
        {"url": "https://i.postimg.cc/05T9x6WH/IMG-20251020-095937-768.jpg", "accuracy": "90%"},
        {"url": "https://i.postimg.cc/CKrV2dnv/IMG-20251020-095949-124.jpg", "accuracy": "83%"},
        {"url": "https://i.postimg.cc/L5dGdP9Y/IMG-20251020-100002-472.jpg", "accuracy": "86%"},
        {"url": "https://i.postimgimg.cc/25MKvWBg/IMG-20251020-100012-671.jpg", "accuracy": "81%"},
        {"url": "https://i.postimg.cc/4ybLrF2D/IMG-20251020-100023-691.jpg", "accuracy": "87%"},
        {"url": "https://i.postimg.cc/vZmqNhrP/IMG-20251020-100033-810.jpg", "accuracy": "84%"},
        {"url": "https://i.postimg.cc/8cDwBmk3/IMG-20251020-100038-185.jpg", "accuracy": "77%"},
        {"url": "https://i.postimg.cc/7YKX0zFL/IMG-20251020-100045-990.jpg", "accuracy": "89%"},
        {"url": "https://i.postimg.cc/ZRzL4xNb/IMG-20251020-100053-162.jpg", "accuracy": "76%"},
        {"url": "https://i.postimg.cc/9QvdYYJb/IMG-20251020-100113-609.jpg", "accuracy": "91%"}
    ],
    "medium": [
        {"url": "https://i.postimg.cc/JnJPX4J6/IMG-20251020-104414-537.jpg", "accuracy": "85%"},
        {"url": "https://i.postimg.cc/ZnHPP9qJ/IMG-20251020-104430-876.jpg", "accuracy": "82%"},
        {"url": "https://i.postimg.cc/Z528LzJ2/IMG-20251020-104435-861.jpg", "accuracy": "88%"},
        {"url": "https://i.postimg.cc/tJ4njBXg/IMG-20251020-104439-671.jpg", "accuracy": "83%"},
        {"url": "https://i.postimg.cc/dVykwkKH/IMG-20251020-104443-615.jpg", "accuracy": "87%"},
        {"url": "https://i.postimg.cc/MHHH4XDw/IMG-20251020-104452-202.jpg", "accuracy": "84%"},
        {"url": "https://i.postimg.cc/6pn3FkdL/IMG-20251020-104458-282.jpg", "accuracy": "86%"},
        {"url": "https://i.postimg.cc/85PzJsqD/IMG-20251020-104509-839.jpg", "accuracy": "81%"},
        {"url": "https://i.postimg.cc/bN2N27Vm/IMG-20251020-104521-438.jpg", "accuracy": "89%"},
        {"url": "https://i.postimg.cc/0NZ8sPrV/IMG-20251020-104526-899.jpg", "accuracy": "85%"},
        {"url": "https://i.postimg.cc/T2KWCHHs/IMG-20251020-104532-810.jpg", "accuracy": "82%"},
        {"url": "https://i.postimg.cc/ZqYW3fdX/IMG-20251020-104537-998.jpg", "accuracy": "88%"},
        {"url": "https://i.postimg.cc/wxR7hR7w/IMG-20251020-104543-014.jpg", "accuracy": "83%"},
        {"url": "https://i.postimg.cc/3x1RKgcx/IMG-20251020-104615-327.jpg", "accuracy": "87%"}
    ],
    "hard": [
        {"url": "https://i.postimg.cc/4N8qsy1c/IMG-20251020-105355-761.jpg", "accuracy": "85%"},
        {"url": "https://i.postimg.cc/tJ4njBXg/IMG-20251020-104439-671.jpg", "accuracy": "82%"},
        {"url": "https://i.postimg.cc/8cpXVgJ4/IMG-20251020-105410-692.jpg", "accuracy": "88%"},
        {"url": "https://i.postimg.cc/HsLvZH1t/IMG-20251020-105415-479.jpg", "accuracy": "83%"},
        {"url": "https://i.postimg.cc/90gb5RH8/IMG-20251020-105424-630.jpg", "accuracy": "87%"},
        {"url": "https://i.postimg.cc/HL12g1F1/IMG-20251020-105428-916.jpg", "accuracy": "84%"},
        {"url": "https://i.postimg.cc/hjpbTzvJ/IMG-20251020-105436-994.jpg", "accuracy": "86%"},
        {"url": "https://i.postimg.cc/RVj17zSJ/IMG-20251020-105443-517.jpg", "accuracy": "81%"},
        {"url": "https://i.postimg.cc/bJN1yygc/IMG-20251020-105450-320.jpg", "accuracy": "89%"},
        {"url": "https://i.postimg.cc/DfSBL6Q8/IMG-20251020-105458-348.jpg", "accuracy": "85%"},
        {"url": "https://i.postimg.cc/zDHFVB5B/IMG-20251020-105512-639.jpg", "accuracy": "82%"}
    ],
    "hardcore": [
        {"url": "https://i.postimg.cc/NMcBmFVb/IMG-20251020-110213-026.jpg", "accuracy": "85%"},
        {"url": "https://i.postimg.cc/xjgnN0P6/IMG-20251020-110218-479.jpg", "accuracy": "82%"},
        {"url": "https://i.postimg.cc/FsBvGD8p/IMG-20251020-110222-741.jpg", "accuracy": "88%"},
        {"url": "https://i.postimg.cc/RVj17zSJ/IMG-20251020-105443-517.jpg", "accuracy": "83%"},
        {"url": "https://i.postimg.cc/pTRMy75V/IMG-20251020-110240-031.jpg", "accuracy": "87%"},
        {"url": "https://i.postimg.cc/VvZxGkGs/IMG-20251020-110255-468.jpg", "accuracy": "84%"}
    ]
}


# --- Utility Functions ---

def get_user_data(user_id):
    """Retrieves or initializes user data."""
    user_id_str = str(user_id)
    if user_id_str not in users:
        users[user_id_str] = {
            "id": user_id_str,
            "language": "en",
            "registered": False,
            "deposited": False,
            "playerId": None,
            "predictionsUsed": 0,
            "joinedAt": datetime.now().isoformat(),
            "lastActive": datetime.now().isoformat(),
        }
        stats["total"] += 1
    users[user_id_str]["lastActive"] = datetime.now().isoformat()
    return users[user_id_str]

async def send_admin_notification(application, message):
    """Sends a notification to the admin chat ID."""
    if not ADMIN_CHAT_ID:
        logger.warning("ADMIN_CHAT_ID not set. Skipping admin notification.")
        return

    notification_text = (
        f"ЁЯдЦ BOT NOTIFICATION\n{message}\n\n"
        f"ЁЯУК STATS:\nTotal Users: {stats['total']}\n"
        f"Registered: {stats['registered']}\n"
        f"Deposited: {stats['deposited']}"
    )
    try:
        await application.bot.send_message(
            chat_id=ADMIN_CHAT_ID, text=notification_text
        )
    except Exception as e:
        logger.error(f"Admin notification failed: {e}")

async def send_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, mode, step):
    """Sends a prediction message with an image and controls."""
    chat_id = update.effective_chat.id
    user = users[str(user_id)]
    lang = user["language"]
    mode_images = prediction_images.get(mode, [])
    
    if not mode_images:
        await context.bot.send_message(chat_id, "Error: Invalid game mode.")
        return
        
    random_image = random.choice(mode_images)

    caption = (
        f"ЁЯСЖ BET ЁЯСЖ\n\n(\"CASH OUT\" at this value or before)\n"
        f"ACCURACY:- {random_image['accuracy']}\n\nStep: {step}/20"
    )

    keyboard = [
        [InlineKeyboardButton("тЮбя╕П Next", callback_data=f"next_{mode}")],
        [InlineKeyboardButton("ЁЯУЛ Menu", callback_data="prediction_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await context.bot.send_photo(
            chat_id, 
            photo=random_image["url"], 
            caption=caption, 
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Failed to send photo: {e}. Sending text fallback.")
        # Fallback if image fails (similar to Node.js code)
        fallback_caption = f"ЁЯОп {mode.upper()} MODE\n\n{caption}"
        await context.bot.send_message(chat_id, fallback_caption, reply_markup=reply_markup)

# --- Telegram Bot Handlers (Replacing Node.js bot.onText and bot.on) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the /start command."""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "User"
    user = get_user_data(user_id)
    lang = user["language"]
    
    if stats["total"] == 1 and users[str(user_id)]["joinedAt"] == users[str(user_id)]["lastActive"]:
        # New user logic (approximate, since stat count is global)
        await send_admin_notification(
            context.application,
            f"ЁЯЖХ NEW USER STARTED\nUser: {user_name}\nID: {user_id}\nTotal Users: {stats['total']}",
        )
    
    caption = (
        f"{languages[lang]['step1']}\n\n{languages[lang]['mustNew']}\n\n"
        f"{languages[lang]['instructions']}"
    )
    
    keyboard = [
        [InlineKeyboardButton("ЁЯУ▓ Register", url=AFFILIATE_LINK)],
        [InlineKeyboardButton("ЁЯФН Check Registration", callback_data="check_registration")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Send registration image with buttons - EXACT FROM YOUR MESSAGE
    await update.message.reply_photo(
        "https://i.postimg.cc/4Nh2kPnv/Picsart-25-10-16-14-41-43-751.jpg",
        caption=caption,
        reply_markup=reply_markup,
    )

async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the /language command."""
    user_id = str(update.effective_user.id)
    user = get_user_data(user_id)
    lang = user["language"]
    
    keyboard = [
        [InlineKeyboardButton(f"{languages['en']['flag']} {languages['en']['name']}", callback_data="lang_en")],
        [InlineKeyboardButton(f"{languages['hi']['flag']} {languages['hi']['name']}", callback_data="lang_hi")],
        [InlineKeyboardButton(f"{languages['bn']['flag']} {languages['bn']['name']}", callback_data="lang_bn")],
        [InlineKeyboardButton(f"{languages['ur']['flag']} {languages['ur']['name']}", callback_data="lang_ur")],
        [InlineKeyboardButton(f"{languages['ne']['flag']} {languages['ne']['name']}", callback_data="lang_ne")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(languages[lang]["selectLanguage"], reply_markup=reply_markup)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles all inline keyboard button presses."""
    query = update.callback_query
    await query.answer() # Acknowledge the query
    data = query.data
    user_id = str(query.from_user.id)
    user = get_user_data(user_id)
    lang = user["language"]
    chat_id = query.message.chat_id

    try:
        if data.startswith("lang_"):
            new_lang = data.split("_")[1]
            user["language"] = new_lang
            
            await query.edit_message_text(languages[new_lang]["welcome"])

            # Send registration image with buttons
            caption = (
                f"{languages[new_lang]['step1']}\n\n{languages[new_lang]['mustNew']}\n\n"
                f"{languages[new_lang]['instructions']}"
            )
            keyboard = [
                [InlineKeyboardButton("ЁЯУ▓ Register", url=AFFILIATE_LINK)],
                [InlineKeyboardButton("ЁЯФН Check Registration", callback_data="check_registration")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id,
                "https://i.postimg.cc/4Nh2kPnv/Picsart-25-10-16-14-41-43-751.jpg",
                caption=caption,
                reply_markup=reply_markup,
            )

        elif data == "check_registration" or data == "check_deposit":
            await context.bot.send_message(
                chat_id,
                f"{languages[lang]['enterPlayerId']}\n\n"
                f"{languages[lang]['howToFind']}\n\n"
                f"{languages[lang]['enterPlayerIdNow']}",
            )

        elif data.startswith("mode_"):
            mode = data.split("_")[1]
            user["currentMode"] = mode
            user["predictionsUsed"] = 0
            
            await send_prediction(update, context, user_id, mode, 1)

        elif data.startswith("next_"):
            mode = data.split("_")[1]
            user["predictionsUsed"] += 1
            
            if user["predictionsUsed"] >= 20:
                keyboard = [
                    [InlineKeyboardButton("ЁЯХР Try Tomorrow", callback_data="try_tomorrow")],
                    [InlineKeyboardButton("ЁЯТ│ Deposit Again", url=AFFILIATE_LINK)],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(
                    chat_id, languages[lang]["limitReached"], reply_markup=reply_markup
                )
            else:
                await send_prediction(update, context, user_id, mode, user["predictionsUsed"] + 1)
        
        elif data == 'prediction_menu':
            keyboard = [
                [InlineKeyboardButton("ЁЯОп Easy", callback_data="mode_easy")],
                [InlineKeyboardButton("тЪб Medium", callback_data="mode_medium")],
                [InlineKeyboardButton("ЁЯФе Hard", callback_data="mode_hard")],
                [InlineKeyboardButton("ЁЯТА Hardcore", callback_data="mode_hardcore")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id, languages[lang]["congratulations"], reply_markup=reply_markup
            )

        elif data == 'try_tomorrow':
            await context.bot.send_message(chat_id, "тП░ Come back tomorrow for more predictions!")

    except Exception as e:
        logger.error(f"Callback error: {e}")
        # Note: In python-telegram-bot, edit_message_text fails if the content is identical.
        # We rely on query.answer() and subsequent messages for flow.

async def handle_player_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles messages that look like a Player ID (digits only)."""
    message_text = update.message.text
    if not message_text.isdigit():
        return # Ignore non-digit messages here

    user_id = str(update.effective_user.id)
    player_id = message_text
    user = get_user_data(user_id)
    lang = user["language"]

    user["playerId"] = player_id

    loading_msg = await update.message.reply_text(languages[lang]["checking"])

    try:
        # Verify player with postback data
        registration = postback_data["registrations"].get(player_id)
        deposit = postback_data["deposits"].get(player_id)
        # approved is not strictly used in your Node.js flow here, but kept for completeness
        
        await context.bot.delete_message(update.effective_chat.id, loading_msg.message_id)

        if registration and deposit:
            # User has registration AND deposit
            if not user["registered"]:
                user["registered"] = True
                user["deposited"] = True
                stats["registered"] += 1
                stats["deposited"] += 1
                await send_admin_notification(
                    context.application,
                    f"тЬЕ USER REGISTERED & DEPOSITED\nUser ID: {user_id}\nPlayer ID: {player_id}\nAmount: {deposit.get('amount', 'N/A')}",
                )

            keyboard = [
                [InlineKeyboardButton("ЁЯОп Easy", callback_data="mode_easy")],
                [InlineKeyboardButton("тЪб Medium", callback_data="mode_medium")],
                [InlineKeyboardButton("ЁЯФе Hard", callback_data="mode_hard")],
                [InlineKeyboardButton("ЁЯТА Hardcore", callback_data="mode_hardcore")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"{languages[lang]['verified']}\n\n{languages[lang]['congratulations']}",
                reply_markup=reply_markup,
            )

        elif registration and not deposit:
            # User has registration but NO deposit
            if not user["registered"]:
                user["registered"] = True
                stats["registered"] += 1
                await send_admin_notification(
                    context.application,
                    f"тЬЕ USER REGISTERED\nUser ID: {user_id}\nPlayer ID: {player_id}",
                )

            keyboard = [
                [InlineKeyboardButton("ЁЯТ│ Deposit", url=AFFILIATE_LINK)],
                [InlineKeyboardButton("ЁЯФН Check Deposit", callback_data="check_deposit")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                languages[lang]["registeredNoDeposit"], reply_markup=reply_markup
            )

        else:
            # User NOT registered
            keyboard = [
                [InlineKeyboardButton("ЁЯУ▓ Register Now", url=AFFILIATE_LINK)],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                languages[lang]["notRegistered"], reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"Player ID verification error: {e}")
        await context.bot.delete_message(update.effective_chat.id, loading_msg.message_id)
        keyboard = [
            [InlineKeyboardButton("ЁЯФД Try Again", callback_data="check_registration")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "тЭМ Verification failed. Please try again.", reply_markup=reply_markup
        )

# --- Flask Server (Webhooks and Postbacks) ---

app = Flask(__name__)
application = Application.builder().token(BOT_TOKEN).build()

# Initialize handlers with the application
application.add_handler(CommandHandler("start", start_command))
application.add_handler(CommandHandler("language", language_command))
application.add_handler(CallbackQueryHandler(callback_handler))
# This handles all non-command, non-callback messages that are digits
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_player_id_input))

@app.route("/lwin-postback", methods=["GET"])
def lwin_postback():
    """Handles the 1Win Postback endpoint."""
    player_id = request.args.get("player_id")
    status = request.args.get("status")
    amount = request.args.get("amount")
    
    if not player_id or not status:
        return jsonify({"success": False, "message": "Missing player_id or status"}), 400

    logger.info(f"ЁЯУе 1Win Postback: {{'player_id': {player_id}, 'status': {status}, 'amount': {amount}}}")

    current_time = datetime.now().isoformat()
    
    if status == "registration":
        postback_data["registrations"][player_id] = {
            "player_id": player_id,
            "status": "registered",
            "deposited": False,
            "registeredAt": current_time,
        }
        logger.info(f"тЬЕ Registration recorded: {player_id}")
    elif status == "fdp":
        postback_data["deposits"][player_id] = {
            "player_id": player_id,
            "status": "deposited",
            "amount": amount or 0,
            "depositedAt": current_time,
        }
        if player_id in postback_data["registrations"]:
            postback_data["registrations"][player_id]["deposited"] = True
            postback_data["registrations"][player_id]["depositAmount"] = amount or 0
        logger.info(f"ЁЯТ░ Deposit recorded: {player_id}, Amount: {amount}")
    elif status == "fd_approved":
        postback_data["approvedDeposits"][player_id] = {
            "player_id": player_id,
            "status": "approved",
            "amount": amount or 0,
            "approvedAt": current_time,
        }
        logger.info(f"ЁЯОЙ Deposit approved: {player_id}, Amount: {amount}")
    
    return jsonify({"success": True, "player_id": player_id, "status": status})

@app.route("/verify-player/<player_id>", methods=["GET"])
def verify_player(player_id):
    """Player verification endpoint (same as Node.js)."""
    registration = postback_data["registrations"].get(player_id)
    deposit = postback_data["deposits"].get(player_id)
    approved = postback_data["approvedDeposits"].get(player_id)
    
    response = {
        "isRegistered": bool(registration),
        "hasDeposit": bool(deposit),
        "isApproved": bool(approved),
        "registrationData": registration,
        "depositData": deposit,
        "approvedData": approved,
    }
    
    logger.info(f"ЁЯФН Player verification: {response}")
    return jsonify(response)

@app.route("/webhook", methods=["POST"])
async def webhook():
    """Main Telegram Webhook endpoint."""
    if request.method == "POST":
        update = Update.de_json(request.get_json(force=True), application.bot)
        await application.update_queue.put(update)
        return jsonify({"status": "ok"})
    return "Method Not Allowed", 405

@app.route("/setup-webhook", methods=["GET"])
async def setup_webhook_route():
    """Manual webhook setup route."""
    if not VERCEL_URL:
        return jsonify({"success": False, "error": "VERCEL_URL not set"}), 500

    webhook_url = f"{VERCEL_URL}/webhook"
    try:
        await application.bot.set_webhook(url=webhook_url)
        logger.info(f"тЬЕ Webhook set: {webhook_url}")
        return jsonify({"success": True, "message": "Webhook set successfully"})
    except Exception as e:
        logger.error(f"тЭМ Webhook error: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route("/stats", methods=["GET"])
def get_stats():
    """Stats endpoint."""
    return jsonify({
        "botStats": stats,
        "postbackStats": {
            "registrations": len(postback_data["registrations"]),
            "deposits": len(postback_data["deposits"]),
            "approved": len(postback_data["approvedDeposits"]),
        },
        "userStats": {
            "total": len(users),
            "registered": len([u for u in users.values() if u["registered"]]),
            "deposited": len([u for u in users.values() if u["deposited"]]),
        }
    })

@app.route("/", methods=["GET"])
def home_route():
    """Home route for health check."""
    return jsonify({
        "status": "ЁЯЪА Chicken Predictor Bot - FULLY WORKING (Python/Flask)",
        "message": "All features working with EXACT text from your requirements",
        "features": [
            "5 Languages with exact text",
            "1Win Postback Integration",
            "4 Game Modes with all images",
            "Daily 20 predictions limit (Logic in bot, reset function separate)",
            "Player verification system",
            "Admin notifications",
            "Webhooks via Flask"
        ]
    })

# --- Cron Job / Scheduled Task (Simulated) ---

# Note: Vercel does not reliably run cron jobs. You would typically use a separate
# scheduled service (like cron-job.org or AWS EventBridge/Lambda) to hit a
# dedicated endpoint, or run a separate worker process.
# We include the *logic* here in a function.

async def daily_motivational_messages(application: Application):
    """Sends daily motivational messages."""
    messages = {
        "en": "You're missing yours chance to win big /start to get Prediction now",
        "hi": "рдЖрдк рдмрдбрд╝реА рдЬреАрдд рдХрд╛ рдореМрдХрд╛ рдЧрдВрд╡рд╛ рд░рд╣реЗ рд╣реИрдВ /start рд╕реЗ рдЕрднреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "bn": "ржЖржкржирж┐ ржмржбрж╝ ржЬржпрж╝рзЗрж░ рж╕рзБржпрзЛржЧ рж╣рж╛рж░рж╛ржЪрзНржЫрзЗржи /start ржжрж┐ржпрж╝рзЗ ржПржЦржиржЗ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржкрж╛ржи",
        "ur": "╪в┘╛ ╪и┌С█М ╪м█М╪к ┌й╪з ┘Е┘И┘В╪╣ ┌й┌╛┘И ╪▒█Б█Т █Б█М┌║ /start ╪│█Т ╪з╪и┌╛█М ┘╛█М╪┤┘Ж ┌п┘И╪ж█М ╪н╪з╪╡┘Д ┌й╪▒█М┌║",
        "ne": "рддрдкрд╛рдИрдВ рдареВрд▓реЛ рдЬрд┐рддрдХреЛ рдЕрд╡рд╕рд░ рдЧреБрдорд╛рдЙрдБрджреИ рд╣реБрдиреБрд╣реБрдиреНрдЫ /start рд▓реЗ рдЕрд╣рд┐рд▓реЗ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрдиреБрд╣реЛрд╕реН"
    }
    
    logger.info("Running daily motivational message sender.")
    
    # Reset predictionsUsed for all users as part of the daily routine
    for user_id in list(users.keys()):
        users[user_id]["predictionsUsed"] = 0 
        
    for user_id, user_data in list(users.items()): # Iterate on a copy in case of deletion
        try:
            lang = user_data["language"]
            message_text = messages.get(lang) or messages["en"]
            await application.bot.send_message(user_id, message_text)
        except Exception as e:
            logger.warning(f"Failed to send message to user {user_id}. Deleting user. Error: {e}")
            del users[user_id] # User might have blocked the bot

@app.route("/cron-daily-reset-and-message", methods=["GET"])
async def cron_endpoint():
    """A dedicated endpoint to be hit by an external cron service (e.g., at 09:00 UTC)."""
    # This simulates the cron logic from the Node.js code
    await daily_motivational_messages(application)
    return jsonify({"success": True, "message": "Daily cron task completed."})


# --- Initialization (main function) ---

async def init_webhook():
    """Sets up the initial webhook if VERCEL_URL is available."""
    if VERCEL_URL:
        await application.bot.set_webhook(url=f"{VERCEL_URL}/webhook")
        logger.info(f"тЬЕ Webhook set: {VERCEL_URL}/webhook")
    else:
        logger.error("VERCEL_URL not set. Webhook setup skipped.")

# Run the initialization
if VERCEL_URL:
    # Use the asynchronous version of init_webhook before running the app
    import asyncio
    asyncio.run(init_webhook())
    
# NOTE: Vercel requires the app object to be imported and run by its internal server.
# The `application.run_polling()` or `app.run()` part is typically handled by Vercel.
# We just need to expose the `app` object.

# If running locally for testing:
# if __name__ == "__main__":
#     application.run_polling(poll_interval=1.0) # For local polling mode
#     app.run(port=os.environ.get("PORT", 3000)) # For local webhook mode (requires tunneling)
