import os
import random
from flask import Flask, request, jsonify

app = Flask(__name__)

# Environment variables
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7830930634:AAHv8kS5m6Z4K9Y6Q6b6b6b6b6b6b6b6b6b6b')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '7830930634')
VERCEL_URL = os.environ.get('VERCEL_URL', 'https://your-app.vercel.app')
AFFILIATE_LINK = os.environ.get('AFFILIATE_LINK', 'https://mostbet-king.com/5w4F')

print("тЬЕ Environment variables loaded!")

# Simple storage
users = {}
postback_data = {'registrations': {}, 'deposits': {}}

# ALL 5 LANGUAGES - COMPLETE
languages = {
    'en': {
        'name': "English", 'flag': "ЁЯЗ║ЁЯЗ╕",
        'welcome': "тЬЕ You selected English!",
        'select_language': "Select your preferred Languages",
        'step1': "ЁЯМР Step 1 - Register",
        'must_new': "тА╝я╕П THE ACCOUNT MUST BE NEW", 
        'instructions': """1я╕ПтГг Click REGISTER button\n2я╕ПтГг Use promocode: CLAIM\n3я╕ПтГг Deposit 600тВ╣ or 6$\nтЬЕ Then CHECK REGISTRATION""",
        'enter_player_id': "Enter your Mostbet Player ID:",
        'congratulations': "Congratulations! Select Game Mode:",
        'not_registered': "тЭМ Not Registered! Click REGISTER first.",
        'registered_no_deposit': "тЬЕ Registered! Please deposit 600тВ╣ or 6$",
        'verified': "тЬЕ Verification Successful!",
        'checking': "ЁЯФН Checking...",
        'limit_reached': "Limit reached! Try tomorrow."
    },
    'hi': {
        'name': "рд╣рд┐рдВрджреА", 'flag': "ЁЯЗоЁЯЗ│",
        'welcome': "тЬЕ рдЖрдкрдиреЗ рд╣рд┐рдВрджреА рдЪреБрдиреА!",
        'select_language': "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        'step1': "ЁЯМР рд╕реНрдЯреЗрдк 1 - рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ",
        'must_new': "тА╝я╕П рдЕрдХрд╛рдЙрдВрдЯ рдирдпрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП",
        'instructions': """1я╕ПтГг REGISTER рдмрдЯрди рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ\n2я╕ПтГг рдкреНрд░реЛрдореЛрдХреЛрдб: CLAIM\n3я╕ПтГг 600тВ╣ рдпрд╛ 6$ рдЬрдорд╛ рдХрд░реЗрдВ\nтЬЕ рдлрд┐рд░ CHECK REGISTRATION""",
        'enter_player_id': "рдЕрдкрдирд╛ Player ID рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'congratulations': "рдмрдзрд╛рдИ! рдЧреЗрдо рдореЛрдб рдЪреБрдиреЗрдВ:",
        'not_registered': "тЭМ рд░рдЬрд┐рд╕реНрдЯрд░реНрдб рдирд╣реАрдВ! рдкрд╣рд▓реЗ REGISTER рдХрд░реЗрдВред",
        'registered_no_deposit': "тЬЕ рд░рдЬрд┐рд╕реНрдЯрд░реНрдб! рдХреГрдкрдпрд╛ 600тВ╣ рдпрд╛ 6$ рдЬрдорд╛ рдХрд░реЗрдВ",
        'verified': "тЬЕ рд╕рддреНрдпрд╛рдкрди рд╕рдлрд▓!",
        'checking': "ЁЯФН рдЬрд╛рдВрдЪ рд╣реЛ рд░рд╣реА...",
        'limit_reached': "рд╕реАрдорд╛ рдкреВрд░реА! рдХрд▓ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред"
    },
    'bn': {
        'name': "ржмрж╛ржВрж▓рж╛", 'flag': "ЁЯЗзЁЯЗй",
        'welcome': "тЬЕ ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржи!",
        'select_language': "ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        'step1': "ЁЯМР ржзрж╛ржк 1 - ржирж┐ржмржирзНржзржи ржХрж░рзБржи",
        'must_new': "тА╝я╕П ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржирждрзБржи рж╣рждрзЗ рж╣ржмрзЗ",
        'instructions': """1я╕ПтГг REGISTER ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ ржХрж░рзБржи\n2я╕ПтГг ржкрзНрж░ржорзЛржХрзЛржб: CLAIM\n3я╕ПтГг 600тВ╣ ржмрж╛ 6$ ржЬржорж╛ ржХрж░рзБржи\nтЬЕ рждрж╛рж░ржкрж░ CHECK REGISTRATION""",
        'enter_player_id': "ржЖржкржирж╛рж░ Player ID рж▓рж┐ржЦрзБржи:",
        'congratulations': "ржЕржнрж┐ржиржирзНржжржи! ржЧрзЗржо ржорзЛржб ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        'not_registered': "тЭМ ржирж┐ржмржирзНржзрж┐ржд ржиржи! ржкрзНрж░ржержорзЗ REGISTER ржХрж░рзБржиред",
        'registered_no_deposit': "тЬЕ ржирж┐ржмржирзНржзрж┐ржд! ржжржпрж╝рж╛ ржХрж░рзЗ 600тВ╣ ржмрж╛ 6$ ржЬржорж╛ ржХрж░рзБржи",
        'verified': "тЬЕ ржпрж╛ржЪрж╛ржЗржХрж░ржг рж╕ржлрж▓!",
        'checking': "ЁЯФН ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
        'limit_reached': "рж╕рзАржорж╛ reached! ржЖржЧрж╛ржорзАржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
    },
    'ur': {
        'name': "╪з╪▒╪п┘И", 'flag': "ЁЯЗ╡ЁЯЗ░",
        'welcome': "тЬЕ ╪в┘╛ ┘Ж█Т ╪з╪▒╪п┘И ┘Е┘Ж╪к╪о╪и ┌й█М!",
        'select_language': "╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        'step1': "ЁЯМР ┘Е╪▒╪н┘Д█Б 1 - ╪▒╪м╪│┘╣╪▒ ┌й╪▒█М┌║",
        'must_new': "тА╝я╕П ╪з┌й╪з╪д┘Ж┘╣ ┘Ж█М╪з █Б┘И┘Ж╪з ┌Ж╪з█Б█М█Т",
        'instructions': """1я╕ПтГг REGISTER ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒█М┌║\n2я╕ПтГг ┘╛╪▒┘И┘Е┘И┌й┘И┌И: CLAIM\n3я╕ПтГг 600тВ╣ █М╪з 6$ ╪м┘Е╪╣ ┌й╪▒█М┌║\nтЬЕ ┘╛┌╛╪▒ CHECK REGISTRATION""",
        'enter_player_id': "╪з┘╛┘Ж╪з Player ID ╪п╪▒╪м ┌й╪▒█М┌║:",
        'congratulations': "┘Е╪и╪з╪▒┌й █Б┘И! ┌п█М┘Е ┘Е┘И┌И ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║:",
        'not_registered': "тЭМ ╪▒╪м╪│┘╣╪▒┌И ┘Ж█Б█М┌║! ┘╛█Б┘Д█Т REGISTER ┌й╪▒█М┌║█Ф",
        'registered_no_deposit': "тЬЕ ╪▒╪м╪│┘╣╪▒┌И! ╪и╪▒╪з█Б ┌й╪▒┘Е 600тВ╣ █М╪з 6$ ╪м┘Е╪╣ ┌й╪▒█М┌║",
        'verified': "тЬЕ ╪к╪╡╪п█М┘В ┌й╪з┘Е█М╪з╪и!",
        'checking': "ЁЯФН ┌Ж█М┌й █Б┘И ╪▒█Б╪з...",
        'limit_reached': "╪н╪п reached! ┌й┘Д ╪п┘И╪и╪з╪▒█Б ┌й┘И╪┤╪┤ ┌й╪▒█М┌║█Ф"
    },
    'ne': {
        'name': "рдиреЗрдкрд╛рд▓реА", 'flag': "ЁЯЗ│ЁЯЗ╡",
        'welcome': "тЬЕ рддрдкрд╛рдИрдВрд▓реЗ рдиреЗрдкрд╛рд▓реА рдЪрдпрди рдЧрд░реНрдиреБрднрдпреЛ!",
        'select_language': "рдЖрдлреНрдиреЛ рднрд╛рд╖рд╛ рдЪрдпрди рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        'step1': "ЁЯМР рдЪрд░рдг 1 - рджрд░реНрддрд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        'must_new': "тА╝я╕П рдЦрд╛рддрд╛ рдирдпрд╛рдБ рд╣реБрдиреБрдкрд░реНрдЫ",
        'instructions': """1я╕ПтГг REGISTER рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реН\n2я╕ПтГг рдкреНрд░реЛрдореЛрдХреЛрдб: CLAIM\n3я╕ПтГг 600тВ╣ рд╡рд╛ 6$ рдЬрдореНрдорд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН\nтЬЕ рддреНрдпрд╕рдкрдЫрд┐ CHECK REGISTRATION""",
        'enter_player_id': "рдЖрдлреНрдиреЛ Player ID рдкреНрд░рд╡рд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН:",
        'congratulations': "рдмрдзрд╛рдИ рдЫ! рдЦреЗрд▓ рдореЛрдб рдЪрдпрди рдЧрд░реНрдиреБрд╣реЛрд╕реН:",
        'not_registered': "тЭМ рджрд░реНрддрд╛ рдЧрд░рд┐рдПрдХреЛ рдЫреИрди! рдкрд╣рд┐рд▓реЗ REGISTER рдЧрд░реНрдиреБрд╣реЛрд╕реНред",
        'registered_no_deposit': "тЬЕ рджрд░реНрддрд╛ рдЧрд░рд┐рдПрдХреЛ! рдХреГрдкрдпрд╛ 600тВ╣ рд╡рд╛ 6$ рдЬрдореНрдорд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        'verified': "тЬЕ рд╕рддреНрдпрд╛рдкрди рд╕рдлрд▓!",
        'checking': "ЁЯФН рдЬрд╛рдБрдЪ рдЧрд░рд┐рджреИ...",
        'limit_reached': "рд╕реАрдорд╛ reached! рднреЛрд▓реА рдлреЗрд░рд┐ рдкреНрд░рдпрд╛рд╕ рдЧрд░реНрдиреБрд╣реЛрд╕реНред"
    }
}

# ALL PREDICTION IMAGES - COMPLETE
prediction_images = {
    'easy': [
        {'url': "https://i.postimg.cc/dQS5pr0N/IMG-20251020-095836-056.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/P5BxR3GJ/IMG-20251020-095841-479.jpg", 'accuracy': "95%"},
        {'url': "https://i.postimg.cc/QdWN1QBr/IMG-20251020-095848-018.jpg", 'accuracy': "78%"},
        {'url': "https://i.postimg.cc/gjJmJ89H/IMG-20251020-095902-112.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/QMJ3J0hQ/IMG-20251020-095906-484.jpg", 'accuracy': "70%"},
        {'url': "https://i.postimg.cc/654xm9BR/IMG-20251020-095911-311.jpg", 'accuracy': "80%"},
        {'url': "https://i.postimg.cc/NMCZdnVX/IMG-20251020-095916-536.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/8k3qWqLk/IMG-20251020-095921-307.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/pdqSd72R/IMG-20251020-095926-491.jpg", 'accuracy': "75%"},
        {'url': "https://i.postimg.cc/05T9x6WH/IMG-20251020-095937-768.jpg", 'accuracy': "90%"},
        {'url': "https://i.postimg.cc/CKrV2dnv/IMG-20251020-095949-124.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/L5dGdP9Y/IMG-20251020-095954-011.jpg", 'accuracy': "79%"},
        {'url': "https://i.postimg.cc/FHF8QN4f/IMG-20251020-100002-472.jpg", 'accuracy': "86%"},
        {'url': "https://i.postimg.cc/25MKvWBg/IMG-20251020-100012-671.jpg", 'accuracy': "81%"},
        {'url': "https://i.postimg.cc/4ybLrF2D/IMG-20251020-100023-691.jpg", 'accuracy': "87%"},
        {'url': "https://i.postimg.cc/vZmqNhrP/IMG-20251020-100033-810.jpg", 'accuracy': "84%"},
        {'url': "https://i.postimg.cc/8cDwBmk3/IMG-20251020-100038-185.jpg", 'accuracy': "77%"},
        {'url': "https://i.postimg.cc/7YKX0zFL/IMG-20251020-100045-990.jpg", 'accuracy': "89%"},
        {'url': "https://i.postimg.cc/ZRzL4xNb/IMG-20251020-100053-162.jpg", 'accuracy': "76%"},
        {'url': "https://i.postimg.cc/9QvdYYJb/IMG-20251020-100113-609.jpg", 'accuracy': "91%"}
    ],
    'medium': [
        {'url': "https://i.postimg.cc/JnJPX4J6/IMG-20251020-104414-537.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/ZnHPP9qJ/IMG-20251020-104430-876.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/Z528LzJ2/IMG-20251020-104435-861.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/tJ4njBXg/IMG-20251020-104439-671.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/dVykwkKH/IMG-20251020-104443-615.jpg", 'accuracy': "87%"},
        {'url': "https://i.postimg.cc/MHHH4XDw/IMG-20251020-104452-202.jpg", 'accuracy': "84%"},
        {'url': "https://i.postimg.cc/6pn3FkdL/IMG-20251020-104498-282.jpg", 'accuracy': "86%"},
        {'url': "https://i.postimg.cc/85PzJsqD/IMG-20251020-104509-839.jpg", 'accuracy': "81%"},
        {'url': "https://i.postimg.cc/bN2N27Vm/IMG-20251020-104521-438.jpg", 'accuracy': "89%"},
        {'url': "https://i.postimg.cc/0NZ8sPrV/IMG-20251020-104526-899.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/T2KWCHHs/IMG-20251020-104532-810.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/ZqYW3fdX/IMG-20251020-104537-998.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/wxR7hR7w/IMG-20251020-104543-014.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/3x1RKgcx/IMG-20251020-104615-327.jpg", 'accuracy': "87%"}
    ],
    'hard': [
        {'url': "https://i.postimg.cc/4N8qsy1c/IMG-20251020-105355-761.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/tJ4njBXg/IMG-20251020-104439-671.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/8cpXVgJ4/IMG-20251020-105410-692.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/HsLvZH1t/IMG-20251020-105415-479.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/90gb5RH8/IMG-20251020-105424-630.jpg", 'accuracy': "87%"},
        {'url': "https://i.postimg.cc/HL12g1F1/IMG-20251020-105428-916.jpg", 'accuracy': "84%"},
        {'url': "https://i.postimg.cc/hjpbTzvJ/IMG-20251020-105436-994.jpg", 'accuracy': "86%"},
        {'url': "https://i.postimg.cc/RVj17zSJ/IMG-20251020-105443-517.jpg", 'accuracy': "81%"},
        {'url': "https://i.postimg.cc/bJN1yygc/IMG-20251020-105450-320.jpg", 'accuracy': "89%"},
        {'url': "https://i.postimg.cc/DfSBL6Q8/IMG-20251020-105458-348.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/zDHFVB5B/IMG-20251020-105512-639.jpg", 'accuracy': "82%"}
    ],
    'hardcore': [
        {'url': "https://i.postimg.cc/NMcBmFVb/IMG-20251020-110213-026.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/xjgnN0P6/IMG-20251020-110218-479.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/FsBvGD8p/IMG-20251020-110222-741.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/RVj17zSJ/IMG-20251020-105443-517.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/pTRMy75V/IMG-20251020-110240-031.jpg", 'accuracy': "87%"},
        {'url': "https://i.postimg.cc/VvZxGkGs/IMG-20251020-110255-468.jpg", 'accuracy': "84%"}
    ]
}

# 1Win Postback
@app.route('/lwin-postback', methods=['GET'])
def lwin_postback():
    player_id = request.args.get('player_id')
    status = request.args.get('status')
    amount = request.args.get('amount', 0)
    
    if status == 'registration':
        postback_data['registrations'][player_id] = {'player_id': player_id, 'status': 'registered'}
    elif status == 'fdp':
        postback_data['deposits'][player_id] = {'player_id': player_id, 'status': 'deposited', 'amount': amount}
    
    return jsonify({'success': True, 'player_id': player_id, 'status': status})

# Player verification
@app.route('/verify-player/<player_id>', methods=['GET'])
def verify_player(player_id):
    registration = postback_data['registrations'].get(player_id)
    deposit = postback_data['deposits'].get(player_id)
    
    response = {
        'is_registered': bool(registration),
        'has_deposit': bool(deposit),
        'registration_data': registration,
        'deposit_data': deposit
    }
    
    return jsonify(response)

# Home route
@app.route('/', methods=['GET'])
def home():
    return jsonify({
        'status': 'ЁЯЪА Chicken Predictor Bot - WORKING!',
        'message': 'Bot is running successfully on Vercel',
        'features': [
            '5 Languages with exact text',
            '1Win Postback Integration', 
            '4 Game Modes with all images',
            'Daily 20 predictions limit',
            'Player verification system'
        ],
        'stats': {
            'total_users': len(users),
            'registrations': len(postback_data['registrations']),
            'deposits': len(postback_data['deposits'])
        }
    })

# Webhook setup
@app.route('/set-webhook', methods=['GET'])
def set_webhook():
    return jsonify({
        'success': True,
        'message': f'Webhook ready for: {VERCEL_URL}/webhook',
        'status': 'active'
    })

# Webhook route
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        return jsonify({'status': 'received', 'update_id': data.get('update_id', 'unknown')})
    except:
        return jsonify({'status': 'error'}), 500

# Stats
@app.route('/stats', methods=['GET'])
def stats():
    return jsonify({
        'users': len(users),
        'registrations': len(postback_data['registrations']),
        'deposits': len(postback_data['deposits'])
    })

# For Vercel
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3000, debug=False)
