import os
import logging
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
import json
import random
from datetime import datetime
import asyncio

# Environment variables
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')
VERCEL_URL = os.environ.get('VERCEL_URL')
AFFILIATE_LINK = os.environ.get('AFFILIATE_LINK', 'https://mostbet-king.com/5w4F')

# Check required variables
if not BOT_TOKEN:
    raise ValueError("тЭМ BOT_TOKEN environment variable is required!")
if not ADMIN_CHAT_ID:
    raise ValueError("тЭМ ADMIN_CHAT_ID environment variable is required!")

print("тЬЕ Environment variables loaded successfully!")

app = Flask(__name__)

# Storage
users = {}
stats = {'total': 0, 'registered': 0, 'deposited': 0}
postback_data = {'registrations': {}, 'deposits': {}, 'approved_deposits': {}}

# ALL 5 LANGUAGES - EXACT TEXT
languages = {
    'en': {
        'name': "English", 'flag': "ЁЯЗ║ЁЯЗ╕",
        'welcome': "тЬЕ You selected English!",
        'select_language': "Select your preferred Languages",
        'step1': "ЁЯМР Step 1 - Register",
        'must_new': "тА╝я╕П THE ACCOUNT MUST BE NEW", 
        'instructions': """1я╕ПтГг If after clicking the "REGISTER" button you get to the old account, you need to log out of it and click the button again.

2я╕ПтГг Specify a promocode during registration: CLAIM

3я╕ПтГг Make a Minimum deposit atleast 600тВ╣ or 6$ in any currency

тЬЕ After REGISTRATION, click the "CHECK REGISTRATION" button""",
        'enter_player_id': "Please enter your Mostbet Player ID to verify:",
        'how_to_find': """ЁЯУЭ How to find Player ID:
1. Login to Mostbet account
2. Go to Profile Settings
3. Copy Player ID number
4. Paste it here""",
        'enter_player_id_now': "ЁЯФв Enter your Player ID now:",
        'congratulations': "Congratulations, Please Select Your Game Mode For Play:",
        'not_registered': """тЭМ Sorry, You're Not Registered!

Please click the REGISTER button first and complete your registration using our affiliate link.

After successful registration, come back and enter your Player ID.""",
        'registered_no_deposit': """ЁЯОЙ Great, you have successfully completed registration!

тЬЕ Your account is synchronized with the bot

ЁЯТ┤ To gain access to signals, deposit your account (make a deposit) with at least 600тВ╣ or $6 in any currency

ЁЯХ╣я╕П After successfully replenishing your account, click on the CHECK DEPOSIT button and gain access""",
        'limit_reached': "You're Reached Your Limited, please try again tommarow for continue prediction or if you want to continue to deposit again atleast 400тВ╣ or 4$ in any currency",
        'checking': "ЁЯФН Checking your registration...",
        'verified': "тЬЕ Verification Successful!",
        'welcome_back': "ЁЯСЛ Welcome back!"
    },
    'hi': {
        'name': "рд╣рд┐рдВрджреА", 'flag': "ЁЯЗоЁЯЗ│",
        'welcome': "тЬЕ рдЖрдкрдиреЗ рд╣рд┐рдВрджреА рдЪреБрдиреА!",
        'select_language': "рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        'step1': "ЁЯМР рд╕реНрдЯреЗрдк 1 - рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ",
        'must_new': "тА╝я╕П рдЕрдХрд╛рдЙрдВрдЯ рдирдпрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП",
        'instructions': """1я╕ПтГг рдЕрдЧрд░ "REGISTER" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЖрдк рдкреБрд░рд╛рдиреЗ рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рдЖрддреЗ рд╣реИрдВ, рддреЛ рд▓реЙрдЧ рдЖрдЙрдЯ рдХрд░рдХреЗ рдлрд┐рд░ рд╕реЗ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ

2я╕ПтГг рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреЗ рджреМрд░рд╛рди рдкреНрд░реЛрдореЛрдХреЛрдб рджрд░реНрдЬ рдХрд░реЗрдВ: CLAIM

3я╕ПтГг рдиреНрдпреВрдирддрдо 600тВ╣ рдпрд╛ 6$ рдЬрдорд╛ рдХрд░реЗрдВ

тЬЕ рдкрдВрдЬреАрдХрд░рдг рдХреЗ рдмрд╛рдж, "CHECK REGISTRATION" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ""",
        'enter_player_id': "рдХреГрдкрдпрд╛ рд╕рддреНрдпрд╛рдкрди рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ Mostbet Player ID рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'how_to_find': """ЁЯУЭ Player ID рдХреИрд╕реЗ рдвреВрдВрдвреЗрдВ:
1. Mostbet рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ
2. рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдкрд░ рдЬрд╛рдПрдВ
3. Player ID рдирдВрдмрд░ рдХреЙрдкреА рдХрд░реЗрдВ
4. рдпрд╣рд╛рдВ рдкреЗрд╕реНрдЯ рдХрд░реЗрдВ""",
        'enter_player_id_now': "ЁЯФв рдЕрдкрдирд╛ Player ID рдЕрдм рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'congratulations': "рдмрдзрд╛рдИ рд╣реЛ, рдХреГрдкрдпрд╛ рдЦреЗрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ рдЧреЗрдо рдореЛрдб рдЪреБрдиреЗрдВ:",
        'not_registered': """тЭМ рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдЖрдк рд░рдЬрд┐рд╕реНрдЯрд░реНрдб рдирд╣реАрдВ рд╣реИрдВ!

рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ REGISTER рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рд╣рдорд╛рд░реЗ рдПрдлрд┐рд▓рд┐рдПрдЯ рд▓рд┐рдВрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдкреВрд░рд╛ рдХрд░реЗрдВ

рд╕рдлрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреЗ рдмрд╛рдж рд╡рд╛рдкрд╕ рдЖрдПрдВ рдФрд░ рдЕрдкрдирд╛ Player ID рджрд░реНрдЬ рдХрд░реЗрдВ""",
        'registered_no_deposit': """ЁЯОЙ рдмрдврд╝рд┐рдпрд╛, рдЖрдкрдиреЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдкреВрд░рд╛ рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ!

тЬЕ рдЖрдкрдХрд╛ рдЕрдХрд╛рдЙрдВрдЯ рдмреЙрдЯ рдХреЗ рд╕рд╛рде рд╕рд┐рдВрдХ рд╣реЛ рдЧрдпрд╛ рд╣реИ

ЁЯТ┤ рд╕рд┐рдЧреНрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреЗ рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рдХрдо рд╕реЗ рдХрдо 600тВ╣ рдпрд╛ $6 рдЬрдорд╛ рдХрд░реЗрдВ

ЁЯХ╣я╕П рдЕрдкрдирд╛ рдЕрдХрд╛рдЙрдВрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░рд┐рдЪрд╛рд░реНрдЬ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж, CHECK DEPOSIT рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рдПрдХреНрд╕реЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ""",
        'limit_reached': "рдЖрдк рдЕрдкрдиреА рд╕реАрдорд╛ рддрдХ рдкрд╣реБрдБрдЪ рдЧрдП рд╣реИрдВ, рдХреГрдкрдпрд╛ рдХрд▓ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдпрд╛ рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдлрд┐рд░ рд╕реЗ рдХрдо рд╕реЗ рдХрдо 400тВ╣ рдпрд╛ 4$ рдЬрдорд╛ рдХрд░реЗрдВ",
        'checking': "ЁЯФН рдЖрдкрдХреА рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдЬрд╛рдВрдЪреА рдЬрд╛ рд░рд╣реА рд╣реИ...",
        'verified': "тЬЕ рд╕рддреНрдпрд╛рдкрди рд╕рдлрд▓!",
        'welcome_back': "ЁЯСЛ рд╡рд╛рдкрд╕реА рдкрд░ рд╕реНрд╡рд╛рдЧрдд!"
    },
    'bn': {
        'name': "ржмрж╛ржВрж▓рж╛", 'flag': "ЁЯЗзЁЯЗй",
        'welcome': "тЬЕ ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржи!",
        'select_language': "ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        'step1': "ЁЯМР ржзрж╛ржк 1 - ржирж┐ржмржирзНржзржи ржХрж░рзБржи",
        'must_new': "тА╝я╕П ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржирждрзБржи рж╣рждрзЗ рж╣ржмрзЗ",
        'instructions': """1я╕ПтГг "REGISTER" ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж╛рж░ ржкрж░рзЗ ржпржжрж┐ ржЖржкржирж┐ ржкрзБрж░рж╛ржирзЛ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржкрзНрж░ржмрзЗрж╢ ржХрж░рзЗржи, рждрж╛рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ рж▓ржЧржЖржЙржЯ ржХрж░рзЗ ржЖржмрж╛рж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рждрзЗ рж╣ржмрзЗ

2я╕ПтГг ржирж┐ржмржирзНржзржирзЗрж░ рж╕ржоржпрж╝ ржкрзНрж░ржорзЛржХрзЛржб ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзБржи: CLAIM

3я╕ПтГг ржирзНржпрзВржирждржо 600тВ╣ ржмрж╛ 6$ ржЬржорж╛ ржХрж░рзБржи

тЬЕ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржирзЗрж░ ржкрж░, "CHECK REGISTRATION" ржмрзЛрждрж╛ржорзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред""",
        'enter_player_id': "ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ Mostbet Player ID рж▓рж┐ржЦрзБржи:",
        'how_to_find': """ЁЯУЭ Player ID ржХрж┐ржнрж╛ржмрзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржмрзЗржи:
1. Mostbet ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ рж▓ржЧржЗржи ржХрж░рзБржи
2. ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯрж┐ржВрж╕рзЗ ржпрж╛ржи
3. Player ID ржиржорзНржмрж░ ржХржкрж┐ ржХрж░рзБржи
4. ржПржЦрж╛ржирзЗ ржкрзЗрж╕рзНржЯ ржХрж░рзБржи""",
        'enter_player_id_now': "ЁЯФв ржПржЦржи ржЖржкржирж╛рж░ Player ID рж▓рж┐ржЦрзБржи:",
        'congratulations': "ржЕржнрж┐ржиржирзНржжржи, ржЦрзЗрж▓рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЧрзЗржо ржорзЛржб ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        'not_registered': """тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж┐ ржирж┐ржмржирзНржзрж┐ржд ржиржи!

ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ REGISTER ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи ржПржмржВ ржЖржорж╛ржжрзЗрж░ ржЕрзНржпрж╛ржлрж┐рж▓рж┐ржпрж╝рзЗржЯ рж▓рж┐ржЩрзНржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржирж┐ржмржирзНржзржи рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзБржи

рж╕ржлрж▓ ржирж┐ржмржирзНржзржирзЗрж░ ржкрж░рзЗ ржлрж┐рж░рзЗ ржЖрж╕рзБржи ржПржмржВ ржЖржкржирж╛рж░ Player ID рж▓рж┐ржЦрзБржи""",
        'registered_no_deposit': """ЁЯОЙ ржжрзБрж░рзНржжрж╛ржирзНржд, ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржирж┐ржмржирзНржзржи рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзЗржЫрзЗржи!

тЬЕ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржмржЯрзЗрж░ рж╕рж╛ржерзЗ рж╕рж┐ржЩрзНржХ рж╣ржпрж╝рзЗржЫрзЗ

ЁЯТ┤ рж╕рж┐ржЧржирзНржпрж╛рж▓ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрзЗрждрзЗ, ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржХржоржкржХрзНрж╖рзЗ 600тВ╣ ржмрж╛ $6 ржЬржорж╛ ржХрж░рзБржи

ЁЯХ╣я╕П ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐ржЪрж╛рж░рзНржЬ ржХрж░рж╛рж░ ржкрж░рзЗ, CHECK DEPOSIT ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи ржПржмржВ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрж╛ржи""",
        'limit_reached': "ржЖржкржирж┐ ржЖржкржирж╛рж░ рж╕рзАржорж╛ржпрж╝ ржкрзМржБржЫрзЗржЫрзЗржи, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржЧрж╛ржорзАржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрзЗрждрзЗ ржЖржмрж╛рж░ ржХржоржкржХрзНрж╖рзЗ 400тВ╣ ржмрж╛ 4$ ржЬржорж╛ ржХрж░рзБржи",
        'checking': "ЁЯФН ржЖржкржирж╛рж░ ржирж┐ржмржирзНржзржи ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
        'verified': "тЬЕ ржпрж╛ржЪрж╛ржЗржХрж░ржг рж╕ржлрж▓!",
        'welcome_back': "ЁЯСЛ ржлрж┐рж░рзЗ ржЖрж╕рж╛рж░ рж╕рзНржмрж╛ржЧрждржо!"
    },
    'ur': {
        'name': "╪з╪▒╪п┘И", 'flag': "ЁЯЗ╡ЁЯЗ░",
        'welcome': "тЬЕ ╪в┘╛ ┘Ж█Т ╪з╪▒╪п┘И ┘Е┘Ж╪к╪о╪и ┌й█М!",
        'select_language': "╪з┘╛┘Ж█М ┘╛╪│┘Ж╪п█М╪п█Б ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        'step1': "ЁЯМР ┘Е╪▒╪н┘Д█Б 1 - ╪▒╪м╪│┘╣╪▒ ┌й╪▒█М┌║",
        'must_new': "тА╝я╕П ╪з┌й╪з╪д┘Ж┘╣ ┘Ж█М╪з █Б┘И┘Ж╪з ┌Ж╪з█Б█М█Т",
        'instructions': """1я╕ПтГг ╪з┌п╪▒ "REGISTER" ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒┘Ж█Т ┌й█Т ╪и╪╣╪п ╪в┘╛ ┘╛╪▒╪з┘Ж█Т ╪з┌й╪з╪д┘Ж┘╣ ┘Е█М┌║ ╪в╪к█Т █Б█М┌║╪М ╪к┘И ╪в┘╛ ┌й┘И ┘Д╪з┌п ╪в╪д┘╣ █Б┘И ┌й╪▒ ╪п┘И╪и╪з╪▒█Б ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒┘Ж╪з █Б┘И┌п╪з

2я╕ПтГг ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┌й█Т ╪п┘И╪▒╪з┘Ж ┘╛╪▒┘И┘Е┘И┌й┘И┌ИцМЗхоЪ ┌й╪▒█М┌║: CLAIM

3я╕ПтГг ┌й┘Е ╪з╪▓ ┌й┘Е 600тВ╣ █М╪з 6$ ╪м┘Е╪╣ ┌й╪▒█М┌║

тЬЕ ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┌й█Т ╪и╪╣╪п╪М "CHECK REGISTRATION" ┌й█Т ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒█М┌║█Ф""",
        'enter_player_id': "╪и╪▒╪з█Б ┌й╪▒┘Е ╪к╪╡╪п█М┘В ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж╪з Mostbet Player ID ╪п╪▒╪м ┌й╪▒█М┌║:",
        'how_to_find': """ЁЯУЭ Player ID ┌й█М╪│█Т ┌И┌╛┘И┘Ж┌И█М┌║:
1. Mostbet ╪з┌й╪з╪д┘Ж┘╣ ┘Е█М┌║ ┘Д╪з┌п ╪з┘Ж ┌й╪▒█М┌║
2. ┘╛╪▒┘И┘Б╪з╪ж┘Д ╪│█М┘╣┘Ж┌п╪▓ ┘╛╪▒ ╪м╪з╪ж█М┌║
3. Player ID ┘Ж┘Е╪и╪▒ ┌й╪з┘╛█М ┌й╪▒█М┌║
4. █М█Б╪з┌║ ┘╛█М╪│┘╣ ┌й╪▒█М┌║""",
        'enter_player_id_now': "ЁЯФв ╪з╪и ╪з┘╛┘Ж╪з Player ID ╪п╪▒╪м ┌й╪▒█М┌║:",
        'congratulations': "┘Е╪и╪з╪▒┌й █Б┘И╪М ╪и╪▒╪з█Б ┌й╪▒┘Е ┌й┌╛█М┘Д┘Ж█Т ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж╪з ┌п█М┘Е ┘Е┘И┌И ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║:",
        'not_registered': """тЭМ ┘Е╪╣╪░╪▒╪к╪М ╪в┘╛ ╪▒╪м╪│┘╣╪▒┌И ┘Ж█Б█М┌║ █Б█М┌║!

╪и╪▒╪з█Б ┌й╪▒┘Е ┘╛█Б┘Д█Т REGISTER ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒█М┌║ ╪з┘И╪▒ █Б┘Е╪з╪▒█Т affiliate link ┌й╪з ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒╪к█Т █Б┘И╪ж█Т ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┘Е┌й┘Е┘Д ┌й╪▒█М┌║

┌й╪з┘Е█М╪з╪и ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┌й█Т ╪и╪╣╪п ┘И╪з┘╛╪│ ╪в╪ж█М┌║ ╪з┘И╪▒ ╪з┘╛┘Ж╪з Player ID ╪п╪▒╪м ┌й╪▒█М┌║""",
        'registered_no_deposit': """ЁЯОЙ ╪и█Б╪к ╪з┌Ж┌╛╪з╪М ╪в┘╛ ┘Ж█Т ┌й╪з┘Е█М╪з╪и█М ┌й█Т ╪│╪з╪к┌╛ ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┘Е┌й┘Е┘Д ┌й╪▒ ┘Д█М █Б█Т!

тЬЕ ╪в┘╛ ┌й╪з ╪з┌й╪з╪д┘Ж┘╣ ╪и┘И┘╣ ┌й█Т ╪│╪з╪к┌╛ sync █Б┘И ┌п█М╪з █Б█Т

ЁЯТ┤ ╪│┌п┘Ж┘Д╪▓ ╪к┌й ╪▒╪│╪з╪ж█М ╪н╪з╪╡┘Д ┌й╪▒┘Ж█Т ┌й█Т ┘Д█М█Т╪М ╪з┘╛┘Ж█Т ╪з┌й╪з╪д┘Ж┘╣ ┘Е█М┌║ ┌й┘Е ╪з╪▓ ┌й┘Е 600тВ╣ █М╪з $6 ╪м┘Е╪╣ ┌й╪▒█М┌║

ЁЯХ╣я╕П ╪з┘╛┘Ж█Т ╪з┌й╪з╪д┘Ж┘╣ ┌й┘И ┌й╪з┘Е█М╪з╪и█М ╪│█Т ╪▒█М ┌Ж╪з╪▒╪м ┌й╪▒┘Ж█Т ┌й█Т ╪и╪╣╪п╪М CHECK DEPOSIT ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒█М┌║ ╪з┘И╪▒ ╪▒╪│╪з╪ж█М ╪н╪з╪╡┘Д ┌й╪▒█М┌║""",
        'limit_reached': "╪в┘╛ ╪з┘╛┘Ж█М ╪н╪п ╪к┌й ┘╛█Б┘Ж┌Ж ┌п╪ж█Т █Б█М┌║╪М ╪и╪▒╪з█Б ┌й╪▒┘Е ┌й┘Д ╪п┘И╪и╪з╪▒█Б ┌й┘И╪┤╪┤ ┌й╪▒█М┌║ █М╪з ╪м╪з╪▒█М ╪▒┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т ╪п┘И╪и╪з╪▒█Б ┌й┘Е ╪з╪▓ ┌й┘Е 400тВ╣ █М╪з 4$ ╪м┘Е╪╣ ┌й╪▒█М┌║",
        'checking': "ЁЯФН ╪в┘╛ ┌й█М ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┌Ж█М┌й ┌й█М ╪м╪з ╪▒█Б█М █Б█Т...",
        'verified': "тЬЕ ╪к╪╡╪п█М┘В ┌й╪з┘Е█М╪з╪и!",
        'welcome_back': "ЁЯСЛ ┘И╪з┘╛╪│█М ┘╛╪▒ ╪о┘И╪┤ ╪в┘Е╪п█М╪п!"
    },
    'ne': {
        'name': "рдиреЗрдкрд╛рд▓реА", 'flag': "ЁЯЗ│ЁЯЗ╡",
        'welcome': "тЬЕ рддрдкрд╛рдИрдВрд▓реЗ рдиреЗрдкрд╛рд▓реА рдЪрдпрди рдЧрд░реНрдиреБрднрдпреЛ!",
        'select_language': "рдЖрдлреНрдиреЛ рдордирдкрд░реНрдиреЗ рднрд╛рд╖рд╛ рдЪрдпрди рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        'step1': "ЁЯМР рдЪрд░рдг 1 - рджрд░реНрддрд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        'must_new': "тА╝я╕П рдЦрд╛рддрд╛ рдирдпрд╛рдБ рд╣реБрдиреБрдкрд░реНрдЫ",
        'instructions': """1я╕ПтГг рдпрджрд┐ "REGISTER" рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реЗрдкрдЫрд┐ рддрдкрд╛рдИрдВ рдкреБрд░рд╛рдиреЛ рдЦрд╛рддрд╛рдорд╛ рдкреБрдЧреНрдиреБрд╣реБрдиреНрдЫ рднрдиреЗ, рддрдкрд╛рдИрдВрд▓реЗ рд▓рдЧрдЖрдЙрдЯ рдЧрд░реЗрд░ рдлреЗрд░рд┐ рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрдкрд░реНрдЫ

2я╕ПтГг рджрд░реНрддрд╛ рд╕рдордпрдорд╛ рдкреНрд░реЛрдореЛрдХреЛрдб рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН: CLAIM

3я╕ПтГг рдХрдореНрддрд┐рдорд╛ 600тВ╣ рд╡рд╛ 6$ рдЬрдореНрдорд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН

тЬЕ рджрд░реНрддрд╛ рдкрдЫрд┐, "CHECK REGISTRATION" рдмрдЯрдирдорд╛ рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реНред""",
        'enter_player_id': "рдХреГрдкрдпрд╛ рд╕рддреНрдпрд╛рдкрди рдЧрд░реНрди рдЖрдлреНрдиреЛ Mostbet Player ID рдкреНрд░рд╡рд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН:",
        'how_to_find': """ЁЯУЭ Player ID рдХрд╕рд░реА рдЦреЛрдЬреНрдиреЗ:
1. Mostbet рдЦрд╛рддрд╛рдорд╛ рд▓рдЧрдЗрди рдЧрд░реНрдиреБрд╣реЛрд╕реН
2. рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрдЯрд┐рдЩрд╣рд░реВрдорд╛ рдЬрд╛рдиреБрд╣реЛрд╕реН
3. Player ID рдирдореНрдмрд░ рдХрдкреА рдЧрд░реНрдиреБрд╣реЛрд╕реН
4. рдпрд╣рд╛рдБ рдкреЗрд╕реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН""",
        'enter_player_id_now': "ЁЯФв рдЕрдм рдЖрдлреНрдиреЛ Player ID рдкреНрд░рд╡рд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН:",
        'congratulations': "рдмрдзрд╛рдИ рдЫ, рдХреГрдкрдпрд╛ рдЦреЗрд▓реНрдирдХреЛ рд▓рд╛рдЧрд┐ рдЖрдлреНрдиреЛ рдЦреЗрд▓ рдореЛрдб рдЪрдпрди рдЧрд░реНрдиреБрд╣реЛрд╕реН:",
        'not_registered': """тЭМ рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд╕реН, рддрдкрд╛рдИрдВ рджрд░реНрддрд╛ рдЧрд░рд┐рдПрдХреЛ рдЫреИрди!

рдХреГрдкрдпрд╛ рдкрд╣рд┐рд▓реЗ REGISTER рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реН рд░ рд╣рд╛рдореНрд░реЛ рдПрдлрд┐рд▓рд┐рдПрдЯ рд▓рд┐рдЩреНрдХ рдкреНрд░рдпреЛрдЧ рдЧрд░реЗрд░ рджрд░реНрддрд╛ рдкреВрд░рд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН

рд╕рдлрд▓ рджрд░реНрддрд╛ рдкрдЫрд┐ рдлрд░реНрдХрдиреБрд╣реЛрд╕реН рд░ рдЖрдлреНрдиреЛ Player ID рдкреНрд░рд╡рд┐рд╖реНрдЯ рдЧрд░реНрдиреБрд╣реЛрд╕реН""",
        'registered_no_deposit': """ЁЯОЙ рд░рд╛рдореНрд░реЛ, рддрдкрд╛рдИрдВрд▓реЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рджрд░реНрддрд╛ рдкреВрд░рд╛ рдЧрд░реНрдиреБрднрдпреЛ!

тЬЕ рддрдкрд╛рдИрдВрдХреЛ рдЦрд╛рддрд╛ рдмреЛрдЯрд╕рдБрдЧ рд╕рд┐рдЩреНрдХ рднрдПрдХреЛ рдЫ

ЁЯТ┤ рд╕рд┐рдЧреНрдирд▓рд╣рд░реВ рдкрд╣реБрдБрдЪ рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрди, рдЖрдлреНрдиреЛ рдЦрд╛рддрд╛рдорд╛ рдХрдореНрддрд┐рдорд╛ 600тВ╣ рд╡рд╛ $6 рдЬрдореНрдорд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН

ЁЯХ╣я╕П рдЖрдлреНрдиреЛ рдЦрд╛рддрд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░рд┐рдЪрд╛рд░реНрдЬ рдЧрд░реЗрдкрдЫрд┐, CHECK DEPOSIT рдмрдЯрди рдХреНрд▓рд┐рдХ рдЧрд░реНрдиреБрд╣реЛрд╕реН рд░ рдкрд╣реБрдБрдЪ рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрдиреБрд╣реЛрд╕реН""",
        'limit_reached': "рддрдкрд╛рдИрдВ рдЖрдлреНрдиреЛ рд╕реАрдорд╛рдорд╛ рдкреБрдЧреНрдиреБрднрдпреЛ, рдХреГрдкрдпрд╛ рднреЛрд▓реА рдлреЗрд░рд┐ рдкреНрд░рдпрд╛рд╕ рдЧрд░реНрдиреБрд╣реЛрд╕реН рд╡рд╛ рдЬрд╛рд░реА рд░рд╛рдЦреНрдирдХрд╛ рд▓рд╛рдЧрд┐ рдлреЗрд░рд┐ рдХрдореНрддрд┐рдорд╛ 400тВ╣ рд╡рд╛ 4$ рдЬрдореНрдорд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        'checking': "ЁЯФН рддрдкрд╛рдИрдВрдХреЛ рджрд░реНрддрд╛ рдЬрд╛рдБрдЪ рдЧрд░рд┐рджреИрдЫ...",
        'verified': "тЬЕ рд╕рддреНрдпрд╛рдкрди рд╕рдлрд▓!",
        'welcome_back': "ЁЯСЛ рдлрд░реНрдХрд┐рдиреБрднрдПрдХреЛрдорд╛ рд╕реНрд╡рд╛рдЧрдд!"
    }
}

# ALL PREDICTION IMAGES
prediction_images = {
    'easy': [
        {'url': "https://i.postimg.cc/dQS5pr0N/IMG-20251020-095836-056.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/P5BxR3GJ/IMG-20251020-095841-479.jpg", 'accuracy': "95%"},
        {'url': "https://i.postimg.cc/QdWN1QBr/IMG-20251020-095848-018.jpg", 'accuracy': "78%"},
        {'url': "https://i.postimg.cc/gjJmJ89H/IMG-20251020-095902-112.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/QMJ3J0hQ/IMG-20251020-095906-484.jpg", 'accuracy': "70%"},
        {'url': "https://i.postimg.cc/654xm9BR/IMG-20251020-095911-311.jpg", 'accuracy': "80%"},
        {'url': "https://i.postimg.cc/NMCZdnVX/IMG-20251020-095916-536.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/8k3qWqLk/IMG-20251020-095921-307.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/pdqSd72R/IMG-20251020-095926-491.jpg", 'accuracy': "75%"},
        {'url': "https://i.postimg.cc/05T9x6WH/IMG-20251020-095937-768.jpg", 'accuracy': "90%"},
        {'url': "https://i.postimg.cc/CKrV2dnv/IMG-20251020-095949-124.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/L5dGdP9Y/IMG-20251020-095954-011.jpg", 'accuracy': "79%"},
        {'url': "https://i.postimg.cc/FHF8QN4f/IMG-20251020-100002-472.jpg", 'accuracy': "86%"},
        {'url': "https://i.postimg.cc/25MKvWBg/IMG-20251020-100012-671.jpg", 'accuracy': "81%"},
        {'url': "https://i.postimg.cc/4ybLrF2D/IMG-20251020-100023-691.jpg", 'accuracy': "87%"},
        {'url': "https://i.postimg.cc/vZmqNhrP/IMG-20251020-100033-810.jpg", 'accuracy': "84%"},
        {'url': "https://i.postimg.cc/8cDwBmk3/IMG-20251020-100038-185.jpg", 'accuracy': "77%"},
        {'url': "https://i.postimg.cc/7YKX0zFL/IMG-20251020-100045-990.jpg", 'accuracy': "89%"},
        {'url': "https://i.postimg.cc/ZRzL4xNb/IMG-20251020-100053-162.jpg", 'accuracy': "76%"},
        {'url': "https://i.postimg.cc/9QvdYYJb/IMG-20251020-100113-609.jpg", 'accuracy': "91%"}
    ],
    'medium': [
        {'url': "https://i.postimg.cc/JnJPX4J6/IMG-20251020-104414-537.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/ZnHPP9qJ/IMG-20251020-104430-876.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/Z528LzJ2/IMG-20251020-104435-861.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/tJ4njBXg/IMG-20251020-104439-671.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/dVykwkKH/IMG-20251020-104443-615.jpg", 'accuracy': "87%"},
        {'url': "https://i.postimg.cc/MHHH4XDw/IMG-20251020-104452-202.jpg", 'accuracy': "84%"},
        {'url': "https://i.postimg.cc/6pn3FkdL/IMG-20251020-104498-282.jpg", 'accuracy': "86%"},
        {'url': "https://i.postimg.cc/85PzJsqD/IMG-20251020-104509-839.jpg", 'accuracy': "81%"},
        {'url': "https://i.postimg.cc/bN2N27Vm/IMG-20251020-104521-438.jpg", 'accuracy': "89%"},
        {'url': "https://i.postimg.cc/0NZ8sPrV/IMG-20251020-104526-899.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/T2KWCHHs/IMG-20251020-104532-810.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/ZqYW3fdX/IMG-20251020-104537-998.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/wxR7hR7w/IMG-20251020-104543-014.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/3x1RKgcx/IMG-20251020-104615-327.jpg", 'accuracy': "87%"}
    ],
    'hard': [
        {'url': "https://i.postimg.cc/4N8qsy1c/IMG-20251020-105355-761.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/tJ4njBXg/IMG-20251020-104439-671.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/8cpXVgJ4/IMG-20251020-105410-692.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/HsLvZH1t/IMG-20251020-105415-479.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/90gb5RH8/IMG-20251020-105424-630.jpg", 'accuracy': "87%"},
        {'url': "https://i.postimg.cc/HL12g1F1/IMG-20251020-105428-916.jpg", 'accuracy': "84%"},
        {'url': "https://i.postimg.cc/hjpbTzvJ/IMG-20251020-105436-994.jpg", 'accuracy': "86%"},
        {'url': "https://i.postimg.cc/RVj17zSJ/IMG-20251020-105443-517.jpg", 'accuracy': "81%"},
        {'url': "https://i.postimg.cc/bJN1yygc/IMG-20251020-105450-320.jpg", 'accuracy': "89%"},
        {'url': "https://i.postimg.cc/DfSBL6Q8/IMG-20251020-105458-348.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/zDHFVB5B/IMG-20251020-105512-639.jpg", 'accuracy': "82%"}
    ],
    'hardcore': [
        {'url': "https://i.postimg.cc/NMcBmFVb/IMG-20251020-110213-026.jpg", 'accuracy': "85%"},
        {'url': "https://i.postimg.cc/xjgnN0P6/IMG-20251020-110218-479.jpg", 'accuracy': "82%"},
        {'url': "https://i.postimg.cc/FsBvGD8p/IMG-20251020-110222-741.jpg", 'accuracy': "88%"},
        {'url': "https://i.postimg.cc/RVj17zSJ/IMG-20251020-105443-517.jpg", 'accuracy': "83%"},
        {'url': "https://i.postimg.cc/pTRMy75V/IMG-20251020-110240-031.jpg", 'accuracy': "87%"},
        {'url': "https://i.postimg.cc/VvZxGkGs/IMG-20251020-110255-468.jpg", 'accuracy': "84%"}
    ]
}

# Initialize Telegram Bot
application = Application.builder().token(BOT_TOKEN).build()

# 1Win Postback
@app.route('/lwin-postback', methods=['GET'])
def lwin_postback():
    player_id = request.args.get('player_id')
    status = request.args.get('status')
    amount = request.args.get('amount', 0)
    
    print(f'ЁЯУе 1Win Postback: player_id={player_id}, status={status}, amount={amount}')
    
    if status == 'registration':
        postback_data['registrations'][player_id] = {
            'player_id': player_id,
            'status': 'registered',
            'deposited': False,
            'registered_at': datetime.now().isoformat()
        }
        print(f'тЬЕ Registration recorded: {player_id}')
    elif status == 'fdp':
        postback_data['deposits'][player_id] = {
            'player_id': player_id,
            'status': 'deposited',
            'amount': amount,
            'deposited_at': datetime.now().isoformat()
        }
        
        if player_id in postback_data['registrations']:
            postback_data['registrations'][player_id]['deposited'] = True
            postback_data['registrations'][player_id]['deposit_amount'] = amount
        print(f'ЁЯТ░ Deposit recorded: {player_id}, Amount: {amount}')
    elif status == 'fd_approved':
        postback_data['approved_deposits'][player_id] = {
            'player_id': player_id,
            'status': 'approved',
            'amount': amount,
            'approved_at': datetime.now().isoformat()
        }
        print(f'ЁЯОЙ Deposit approved: {player_id}, Amount: {amount}')
    
    return jsonify({'success': True, 'player_id': player_id, 'status': status})

# Player verification
@app.route('/verify-player/<player_id>', methods=['GET'])
def verify_player(player_id):
    registration = postback_data['registrations'].get(player_id)
    deposit = postback_data['deposits'].get(player_id)
    approved = postback_data['approved_deposits'].get(player_id)
    
    response = {
        'is_registered': bool(registration),
        'has_deposit': bool(deposit),
        'is_approved': bool(approved),
        'registration_data': registration,
        'deposit_data': deposit,
        'approved_data': approved
    }
    
    print(f'ЁЯФН Player verification: {response}')
    return jsonify(response)

# Admin notification - SYNC VERSION
def send_admin_notification_sync(message):
    try:
        # Run async function in sync context
        async def send_async():
            await application.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"ЁЯдЦ BOT NOTIFICATION\n{message}\n\nЁЯУК STATS:\nTotal Users: {stats['total']}\nRegistered: {stats['registered']}\nDeposited: {stats['deposited']}"
            )
        
        # Run the async function
        asyncio.run(send_async())
    except Exception as e:
        print(f'Admin notification failed: {e}')

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_name = update.effective_user.first_name or 'User'
    
    if user_id not in users:
        users[user_id] = {
            'id': user_id,
            'language': 'en',
            'registered': False,
            'deposited': False,
            'player_id': None,
            'predictions_used': 0,
            'joined_at': datetime.now().isoformat(),
            'last_active': datetime.now().isoformat()
        }
        stats['total'] += 1
        # Use sync version for admin notification
        send_admin_notification_sync(f"ЁЯЖХ NEW USER STARTED\nUser: {user_name}\nID: {user_id}\nTotal Users: {stats['total']}")
    else:
        users[user_id]['last_active'] = datetime.now().isoformat()
    
    user = users[user_id]
    lang = user['language']
    
    # Language selection keyboard
    keyboard = [
        [InlineKeyboardButton(f"{languages['en']['flag']} {languages['en']['name']}", callback_data='lang_en')],
        [InlineKeyboardButton(f"{languages['hi']['flag']} {languages['hi']['name']}", callback_data='lang_hi')],
        [InlineKeyboardButton(f"{languages['bn']['flag']} {languages['bn']['name']}", callback_data='lang_bn')],
        [InlineKeyboardButton(f"{languages['ur']['flag']} {languages['ur']['name']}", callback_data='lang_ur')],
        [InlineKeyboardButton(f"{languages['ne']['flag']} {languages['ne']['name']}", callback_data='lang_ne')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        languages[lang]['select_language'],
        reply_markup=reply_markup
    )

# Handle language selection
async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    data = query.data
    
    if data.startswith('lang_'):
        lang = data.split('_')[1]
        users[user_id]['language'] = lang
        
        await query.edit_message_text(
            languages[lang]['welcome']
        )
        
        # Send registration image with buttons
        keyboard = [
            [InlineKeyboardButton("ЁЯУ▓ Register", url=AFFILIATE_LINK)],
            [InlineKeyboardButton("ЁЯФН Check Registration", callback_data='check_registration')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_photo(
            photo='https://i.postimg.cc/4Nh2kPnv/Picsart-25-10-16-14-41-43-751.jpg',
            caption=f"{languages[lang]['step1']}\n\n{languages[lang]['must_new']}\n\n{languages[lang]['instructions']}",
            reply_markup=reply_markup
        )

# Handle check registration
async def handle_check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    lang = users[user_id]['language']
    
    await query.message.reply_text(
        f"{languages[lang]['enter_player_id']}\n\n{languages[lang]['how_to_find']}\n\n{languages[lang]['enter_player_id_now']}"
    )

# Handle player ID input
async def handle_player_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    player_id = update.message.text
    user = users[user_id]
    lang = user['language']
    
    if player_id.isdigit():
        user['player_id'] = player_id
        
        # Send checking message
        checking_msg = await update.message.reply_text(
            languages[lang]['checking']
        )
        
        try:
            # Verify player with postback data
            registration = postback_data['registrations'].get(player_id)
            deposit = postback_data['deposits'].get(player_id)
            approved = postback_data['approved_deposits'].get(player_id)
            
            # Delete checking message
            await checking_msg.delete()
            
            if registration and deposit:
                # User has registration AND deposit
                if not user['registered']:
                    user['registered'] = True
                    user['deposited'] = True
                    stats['registered'] += 1
                    stats['deposited'] += 1
                    send_admin_notification_sync(f"тЬЕ USER REGISTERED & DEPOSITED\nUser ID: {user_id}\nPlayer ID: {player_id}\nAmount: {deposit.get('amount', 'N/A')}")
                
                keyboard = [
                    [InlineKeyboardButton("ЁЯОп Easy", callback_data='mode_easy')],
                    [InlineKeyboardButton("тЪб Medium", callback_data='mode_medium')],
                    [InlineKeyboardButton("ЁЯФе Hard", callback_data='mode_hard')],
                    [InlineKeyboardButton("ЁЯТА Hardcore", callback_data='mode_hardcore')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"{languages[lang]['verified']}\n\n{languages[lang]['congratulations']}",
                    reply_markup=reply_markup
                )
                
            elif registration and not deposit:
                # User has registration but NO deposit
                if not user['registered']:
                    user['registered'] = True
                    stats['registered'] += 1
                    send_admin_notification_sync(f"тЬЕ USER REGISTERED\nUser ID: {user_id}\nPlayer ID: {player_id}")
                
                keyboard = [
                    [InlineKeyboardButton("ЁЯТ│ Deposit", url=AFFILIATE_LINK)],
                    [InlineKeyboardButton("ЁЯФН Check Deposit", callback_data='check_deposit')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    languages[lang]['registered_no_deposit'],
                    reply_markup=reply_markup
                )
                
            else:
                # User NOT registered
                keyboard = [
                    [InlineKeyboardButton("ЁЯУ▓ Register Now", url=AFFILIATE_LINK)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    languages[lang]['not_registered'],
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            await checking_msg.delete()
            keyboard = [
                [InlineKeyboardButton("ЁЯФД Try Again", callback_data='check_registration')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "тЭМ Verification failed. Please try again.",
                reply_markup=reply_markup
            )

# Send prediction function
async def send_prediction(chat_id, user_id, mode, step):
    user = users[user_id]
    lang = user['language']
    mode_images = prediction_images[mode]
    random_image = random.choice(mode_images)
    
    keyboard = [
        [InlineKeyboardButton("тЮбя╕П Next", callback_data=f'next_{mode}')],
        [InlineKeyboardButton("ЁЯУЛ Menu", callback_data='prediction_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await application.bot.send_photo(
            chat_id=chat_id,
            photo=random_image['url'],
            caption=f"ЁЯСЖ BET ЁЯСЖ\n\n(\"CASH OUT\" at this value or before)\nACCURACY:- {random_image['accuracy']}\n\nStep: {step}/20",
            reply_markup=reply_markup
        )
    except Exception as e:
        # Fallback if image fails
        await application.bot.send_message(
            chat_id=chat_id,
            text=f"ЁЯОп {mode.upper()} MODE\n\nЁЯСЖ BET ЁЯСЖ\n\n(\"CASH OUT\" at this value or before)\nACCURACY:- {random_image['accuracy']}\n\nStep: {step}/20",
            reply_markup=reply_markup
        )

# Handle game mode selection
async def handle_game_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    data = query.data
    
    if data.startswith('mode_'):
        mode = data.split('_')[1]
        users[user_id]['current_mode'] = mode
        users[user_id]['predictions_used'] = 0
        
        await send_prediction(query.message.chat_id, user_id, mode, 1)
    
    elif data.startswith('next_'):
        mode = data.split('_')[1]
        users[user_id]['predictions_used'] += 1
        
        if users[user_id]['predictions_used'] >= 20:
            lang = users[user_id]['language']
            keyboard = [
                [InlineKeyboardButton("ЁЯХР Try Tomorrow", callback_data='try_tomorrow')],
                [InlineKeyboardButton("ЁЯТ│ Deposit Again", url=AFFILIATE_LINK)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                languages[lang]['limit_reached'],
                reply_markup=reply_markup
            )
        else:
            await send_prediction(query.message.chat_id, user_id, mode, users[user_id]['predictions_used'] + 1)
    
    elif data == 'prediction_menu':
        lang = users[user_id]['language']
        keyboard = [
            [InlineKeyboardButton("ЁЯОп Easy", callback_data='mode_easy')],
            [InlineKeyboardButton("тЪб Medium", callback_data='mode_medium')],
            [InlineKeyboardButton("ЁЯФе Hard", callback_data='mode_hard')],
            [InlineKeyboardButton("ЁЯТА Hardcore", callback_data='mode_hardcore')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            languages[lang]['congratulations'],
            reply_markup=reply_markup
        )
    
    elif data == 'check_deposit':
        lang = users[user_id]['language']
        await query.message.reply_text(
            f"{languages[lang]['enter_player_id']}\n\n{languages[lang]['how_to_find']}\n\n{languages[lang]['enter_player_id_now']}"
        )
    
    elif data == 'try_tomorrow':
        await query.message.reply_text("тП░ Come back tomorrow for more predictions!")

# Daily motivational messages - SYNC VERSION
def send_daily_messages():
    messages = {
        'en': "You're missing yours chance to win big /start to get Prediction now",
        'hi': "рдЖрдк рдмрдбрд╝реА рдЬреАрдд рдХрд╛ рдореМрдХрд╛ рдЧрдВрд╡рд╛ рд░рд╣реЗ рд╣реИрдВ /start рд╕реЗ рдЕрднреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        'bn': "ржЖржкржирж┐ ржмржбрж╝ ржЬржпрж╝рзЗрж░ рж╕рзБржпрзЛржЧ рж╣рж╛рж░рж╛ржЪрзНржЫрзЗржи /start ржжрж┐ржпрж╝рзЗ ржПржЦржиржЗ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржкрж╛ржи",
        'ur': "╪в┘╛ ╪и┌С█М ╪м█М╪к ┌й╪з ┘Е┘И┘В╪╣ ┌й┌╛┘И ╪▒█Б█Т █Б█М┌║ /start ╪│█Т ╪з╪и┌╛█М ┘╛█М╪┤┘Ж ┌п┘И╪ж█М ╪н╪з╪╡┘Д ┌й╪▒█М┌║",
        'ne': "рддрдкрд╛рдИрдВ рдареВрд▓реЛ рдЬрд┐рддрдХреЛ рдЕрд╡рд╕рд░ рдЧреБрдорд╛рдЙрдБрджреИ рд╣реБрдиреБрд╣реБрдиреНрдЫ /start рд▓реЗ рдЕрд╣рд┐рд▓реЗ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрдиреБрд╣реЛрд╕реН"
    }
    
    for user_id in list(users.keys()):
        try:
            lang = users[user_id]['language']
            # Run async in sync context
            async def send_msg():
                await application.bot.send_message(chat_id=user_id, text=messages.get(lang, messages['en']))
            
            asyncio.run(send_msg())
        except Exception as e:
            # User might have blocked the bot
            del users[user_id]

# Setup scheduler
scheduler = BackgroundScheduler()
scheduler.add_job(send_daily_messages, 'cron', hour=9, minute=0)
scheduler.start()

# Stats endpoint
@app.route('/stats', methods=['GET'])
def get_stats():
    return jsonify({
        'bot_stats': stats,
        'postback_stats': {
            'registrations': len(postback_data['registrations']),
            'deposits': len(postback_data['deposits']),
            'approved': len(postback_data['approved_deposits'])
        },
        'user_stats': {
            'total': len(users),
            'registered': len([u for u in users.values() if u['registered']]),
            'deposited': len([u for u in users.values() if u['deposited']])
        }
    })

# Home route
@app.route('/', methods=['GET'])
def home():
    return jsonify({
        'status': 'ЁЯЪА Chicken Predictor Bot - WORKING!',
        'message': 'Bot is running successfully on Vercel',
        'features': [
            '5 Languages with exact text',
            '1Win Postback Integration', 
            '4 Game Modes with all images',
            'Daily 20 predictions limit',
            'Player verification system',
            'Admin notifications'
        ]
    })

# Webhook setup route - SIMPLE VERSION
@app.route('/set-webhook', methods=['GET'])
def set_webhook():
    try:
        webhook_url = f"{VERCEL_URL}/webhook"
        # Simple sync approach
        result = application.bot.set_webhook(webhook_url)
        return jsonify({
            'success': True,
            'message': f'Webhook set to: {webhook_url}',
            'result': 'True'
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

# Webhook route - SIMPLE VERSION  
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_data = request.get_json()
        update = Update.de_json(json_data, application.bot)
        
        # Use run_async for better performance
        application.run_async(update)
        return 'OK'
    except Exception as e:
        print(f"Webhook error: {e}")
        return 'ERROR', 500

# Add handlers with run_async
application.add_handler(CommandHandler('start', start, run_async=True))
application.add_handler(CallbackQueryHandler(handle_language_selection, pattern='^lang_', run_async=True))
application.add_handler(CallbackQueryHandler(handle_check_registration, pattern='^check_registration$', run_async=True))
application.add_handler(CallbackQueryHandler(handle_game_mode, pattern='^(mode_|next_|prediction_menu|check_deposit|try_tomorrow)', run_async=True))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_player_id, run_async=True))

# Initialize the application
application.initialize()

# Vercel рдХреЗ рд▓рд┐рдП app instance export рдХрд░реЗрдВ
if __name__ == '__main__':
    # Local development рдХреЗ рд▓рд┐рдП
    app.run(host='0.0.0.0', port=3000, debug=False)
